{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IMasterDeployer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\n/// @notice pool deployer interface.\ninterface IMasterDeployer {\n    // ============ EVENTS ================\n    event DeployPool(address indexed factory, address indexed pool, bytes deployData);\n    event AddToWhitelistFactory(address indexed factory);\n    event RemoveFromWhitelistFactory(address indexed factory);\n    event ProtocolFeeToUpdated(address protocolFeeTo);\n\n    /// @notice create pool through factory\n    function deployPool(address factory, bytes calldata deployData) external returns (address);\n\n    /// @notice Return the address receiving protocol fees from Pool\n    function protocolFeeTo() external view returns (address);\n\n    /// @notice Return whether the pool was deployed via a deployer\n    function pools(address pool) external view returns (bool);\n\n    /// @notice LP Airdrop Distributor address\n    function airdropDistributor() external returns (address);\n\n    /// @notice Return the number of pools deployed from masterDeployer\n    function totalPoolsCount() external view returns (uint256 total);\n\n    /// @notice Return the address of pool by index\n    function getPoolAddress(uint256 idx) external view returns (address pool);\n\n    /// @notice Return the address of Factory deployed pool\n    function getFactoryAddress(address pool) external view returns (address factory);\n}\n"
    },
    "contracts/ProtocolRevenueShare.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\nimport \"./interfaces/IProtocolFeePool.sol\";\nimport \"./interfaces/IMasterDeployer.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./libraries/FullMath.sol\";\nimport \"./interfaces/IProtocolRevenueShare.sol\";\n\n\n/**\n *\n * 판게아스왑 프로토콜 정산\n *\n * 2 단계로 나뉘어 호출됩니다. 주기적으로 풀에서 수수료 토큰들을 수취한 후,\n * revenueToken으로 일괄적으로 스왑하여, GrowthFund와 DaoFund로 분배합니다.\n *\n * 1. 각 풀 별 수수료 수취\n *\n *    ````solidity\n *    function collectByPage(uint256 start, uint256 limit) external;\n *    ````\n *\n *    * masterDeployer에 등록된 판게아스왑의 모든 풀들을 순회하며 호출\n *    * `collectFrom(pool)`을 호출하여 protocol 수수료 수취\n *    * 사전에 masterDeployer에서 protocolFeeTo를 변경\n *\n * 2. revenueToken으로 스왑 후 GrowthFund와 DaoFund로 분배\n *\n *    ````solidity\n *    function share(address feeToken, uint256 minimumOutput, address payable broker, bytes calldata data) external;\n *    ````\n *\n *    `growthFund`에 할당될 비율\n *     [1] 풀 별 growthFundRate가 지정되어 있는 경우에는 쓰고,\n *     [2] 아닌 경우에는 팩토리 별 growthFundRate를 사용\n *\n * ------------------------------------------------------------------------------------\n *\n * Growth Fund란?\n *\n * 판게아 스왑의 성장을 위해 사용하는 목적의 자금으로,\n * 주요 용처는 판게아 스왑의 TVL, Trading Volume을 만들어 줄 수 있는 파트너 프로토콜과의 협업을 위한 자금,\n * 판게아 스왑의 기능 개선 등을 시행할 수 있는 외부 Contributor에 대한 Grant 등으로 사용\n *\n *\n */\n/// @notice 판게아스왑 프로토콜 수수료 분배를 담당하는 컨트랙트\ncontract ProtocolRevenueShare\n    is IProtocolRevenueShare, AccessControlUpgradeable, Multicall {\n    using SafeERC20 for IERC20;\n\n    // @notice swapAndShare / collectByPage(uint256 start, uint256 limit)\n    bytes32 public constant OP_ROLE = keccak256(abi.encode(\"OP\"));\n    bytes32 public constant MANAGER_ROLE = keccak256(abi.encode(\"MANAGER\"));\n    uint256 private constant BIPS = 10000;\n\n    // @notice Pangeaswap MasterDeployer contracts\n    address public masterDeployer;\n\n    // @notice 모든 수익은 revenueToken(usdt)로 바뀌어 제공\n    address public revenueToken;\n\n    // @notice 정산 시 최소 revenueToken 갯수\n    uint256 public minimumRevenue;\n\n    // @notice wrapped KLAY\n    address public wklay;\n\n    // @notice Growth Fund address\n    address public growthFund;\n\n    // @notice DAO Fund address\n    address public daoFund;\n\n    // @notice 풀 별 Growth Fund에 할당될 물량 비율 (unit: bips, 10^4)\n    mapping(address => uint256) private _growthFundRate;\n\n    // @notice Growth Fund에 할당될 물량 비율 존재 여부\n    mapping(address => bool) private _setupGrowthFundRate;\n\n    // @notice 팩토리 별 Growth Fund에 할당될 물량 비율 (uint: bips, 10^4)\n    mapping(address => uint256) private _factoryGrowthFundRate;\n\n    // @notice 팩토리 별 Growth Fund에 할당될 물량  비율 존재 여부\n    mapping(address => bool) private _setupFactoryGrowthFundRate;\n\n    // @notice Growth Fund 할당량 (BIPS가 곱해져 있음)\n    mapping(address => uint256) private _allocatedGrowthFunds;\n\n    // @notice Fee Token을 Revenue 토큰으로 바꿀 수 있는 중개인인지 여부 ( pangeaswap PoolRouter, Dex Aggregators...)\n    mapping(address => bool) public isVerifiedBroker;\n\n    address private cachedPool;\n\n    address[] private _feeTokens;\n    mapping(address => bool) private isFee;\n\n    function initialize(\n        address _masterDeployer,\n        address _revenueToken,\n        address _wklay\n    ) external initializer {\n        require(_masterDeployer != address(0), \"ZERO_ADDRESS\");\n        require(_revenueToken != address(0), \"ZERO_ADDRESS\");\n        require(_wklay != address(0), \"ZERO_ADDRESS\");\n\n        masterDeployer = _masterDeployer;\n        revenueToken = _revenueToken;\n        wklay = _wklay;\n\n        minimumRevenue = 1_000_000;\n\n        __AccessControl_init();\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    // @notice receive klay\n    receive() external payable {\n    }\n\n    //////////////////////////////////////////\n    // MANAGER FUNCTION\n    //////////////////////////////////////////\n    // @notice set revenueToken, only manager can update\n    function setRevenueToken(address _token) external onlyRole(MANAGER_ROLE) {\n        require(_token != address(0), \"NOT_ZERO\");\n        revenueToken = _token;\n\n        emit SetRevenueToken(_token);\n    }\n\n    // @notice set growthFund, only manager can update\n    function setGrowthFund(address _fund) external onlyRole(MANAGER_ROLE) {\n        require(_fund != address(0), \"NOT_ZERO\");\n        growthFund = _fund;\n\n        emit SetGrowthFund(_fund);\n    }\n\n    // @notice set daoFund, only manager can update\n    function setDaoFund(address _fund) external onlyRole(MANAGER_ROLE) {\n        require(_fund != address(0), \"NOT_ZERO\");\n        daoFund = _fund;\n\n        emit SetDaoFund(_fund);\n    }\n\n    // @notice set MinimumRevenue, only manager can update\n    function setMinimumRevenue(uint256 amount) external onlyRole(MANAGER_ROLE) {\n        require(amount > 0, \"NOT_ZERO\");\n        minimumRevenue = amount;\n\n        emit SetMinimumRevenue(amount);\n    }\n\n    // @notice 풀 별 프로토콜 수익 중 growth fund에 할당할 비율\n    function setGrowthFundRate(address _pool, uint256 _rate) external onlyRole(MANAGER_ROLE) {\n        require(_pool != address(0), \"NOT_ZERO\");\n        require(_rate <= BIPS, \"TOO_BIG\");\n\n        _growthFundRate[_pool] = _rate;\n        _setupGrowthFundRate[_pool] = true;\n\n        emit SetGrowthFundRate(_pool, _rate);\n    }\n\n    // @notice 팩토리 별 프로토콜 수익 중 growth fund에 할당할 기본 비율, 풀 별 growthFundRate가 미지정인 경우 이용\n    function setFactoryGrowthFundRate(address _factory, uint256 _rate) external onlyRole(MANAGER_ROLE) {\n        require(_factory != address(0), \"NOT_ZERO\");\n        require(_rate <= BIPS, \"TOO_BIG\");\n\n        _factoryGrowthFundRate[_factory] = _rate;\n        _setupFactoryGrowthFundRate[_factory] = true;\n\n        emit SetFactoryGrowthFundRate(_factory, _rate);\n    }\n\n    // @notice Fee 토큰을 Revenue 토큰으로 스왑을 중개할 수 있는 브로커로 허용할 것인지 여부\n    function verifyBroker(address broker, bool isVerified) external onlyRole(MANAGER_ROLE) {\n        require(broker != address(0), \"NOT_ZERO\");\n        isVerifiedBroker[broker] = isVerified;\n\n        emit VerifyBroker(broker, isVerified);\n    }\n\n    // @notice Broker에게 feeToken에 대해 Approval을 미리 제공\n    // @dev 특정 브로커의 경우에는 approve 획득 전에는 경로를 제공하지 않기 때문에 구성\n    function setApproval(address broker, address feeToken, bool ok) external onlyRole(MANAGER_ROLE) {\n        require(isVerifiedBroker[broker], \"NOT_VERIFED\");\n        if (ok) {\n            IERC20(feeToken).approve(broker, type(uint256).max);\n        } else {\n            IERC20(feeToken).approve(broker, 0);\n        }\n    }\n\n    // @notice Growth Fund에 할애할 비중 계산\n    function getGrowthFundRate(address _pool) public view returns (uint256 rate) {\n        if (_setupGrowthFundRate[_pool]) {\n            return _growthFundRate[_pool];\n        } else {\n            // @dev 풀 별 growth fund rate가 미지정되어 있으면, factory의 growth fund rate를 지정\n            address factory = IMasterDeployer(masterDeployer).getFactoryAddress(_pool);\n            require(_setupFactoryGrowthFundRate[factory], \"NOT_SETUP\");\n            return _factoryGrowthFundRate[factory];\n        }\n    }\n\n    /// @notice 특정 토큰에 대한 Revenue 비율 파악\n    function allocateRevenue(address feeToken) external view returns (uint256 amount, uint256 growthFundShare, uint256 daoFundShare) {\n        amount = IERC20(feeToken).balanceOf(address(this));\n        growthFundShare = FullMath.mulDiv(amount, _allocatedGrowthFunds[feeToken], amount * BIPS);\n        daoFundShare = amount - growthFundShare;\n    }\n\n    function totalFeeTokens() external view returns (uint256) {\n        return _feeTokens.length;\n    }\n\n    function feeTokens(uint256 start, uint256 end) external view returns (address[] memory tokens){\n        tokens = new address[](end - start);\n\n        end = Math.min(end, _feeTokens.length);\n        for (uint256 i = start; i< end; i++) {\n            tokens[i]  = _feeTokens[i];\n        }\n    }\n\n    /// @notice deployer에서 순회하며, 수수료 수취 호출\n    function collectByPage(uint256 start, uint256 limit) external onlyRole(OP_ROLE) {\n        IMasterDeployer deployer = IMasterDeployer(masterDeployer);\n\n        uint256 end = Math.min(deployer.totalPoolsCount(), start + limit);\n        if (start >= end) return;\n\n        for (uint256 i = start; i < end; i++) {\n            address pool = deployer.getPoolAddress(i);\n            (uint128 rev0, uint128 rev1) = IProtocolFeePool(pool).getTokenProtocolFees();\n\n            // @dev 프로토콜 수익이 존재하지 않은 경우 스킵\n            if (rev0 == 0 && rev1 == 0) continue;\n\n            cachedPool = pool;\n            IProtocolFeePool(pool).collectProtocolFee();\n        }\n\n        cachedPool = address(0);\n    }\n\n    /// @notice 특정 풀에서 프로토콜 수익 모으기\n    function collectFrom(address pool) external onlyRole(OP_ROLE) {\n        cachedPool = pool;\n        IProtocolFeePool(pool).collectProtocolFee();\n        cachedPool = address(0);\n    }\n\n    // @notice 풀에서 발생한 수익을 스왑 후, Growth Fund와 Dao Fund로 분배\n    // @param feeToken 프로토콜에서 발생한 수익 토큰\n    // @param minimumOutput 스왑할 경우, 슬리피지를 고려한 output\n    // @param broker feeToken을 revenueToken으로 전환을 수행하는 컨트랙트 ( pangeaswap pool Router, swap Scanner, 1inch, ...)\n    // @param data broker 컨트랙트로의 콜백 데이터\n    function share(\n        address feeToken,\n        uint256 minimumOutput,\n        address payable broker,\n        bytes calldata data\n    ) external onlyRole(OP_ROLE) {\n        // 1. collect된 protocol revenue를 가져오기\n        uint256 amount = IERC20(feeToken).balanceOf(address(this));\n\n        // 2. revenueToken으로 전환 (feeToken == revenueToken인 경우 스킵)\n        uint256 output = swapToRevenueToken(feeToken, amount, minimumOutput, broker, data);\n\n        // 3. Fund 별 지분 분리\n        (uint256 growthFundShare, uint256 daoFundShare) = settleFundShare(feeToken, amount, output);\n\n        // 4. 각 펀드로 자산 전송\n        IERC20 revenue = IERC20(revenueToken);\n        if (growthFundShare > 0) revenue.safeTransfer(growthFund, growthFundShare);\n        if (daoFundShare > 0) revenue.safeTransfer(daoFund, daoFundShare);\n\n        // 5. 이벤트 발행\n        emit Share(feeToken, address(revenue), amount, output, growthFundShare, daoFundShare);\n    }\n\n    // @notice fund 할당량 나누기\n    function settleFundShare(address feeToken, uint256 total, uint256 amount) internal returns (uint256 growthFundShare, uint256 daoFundShare) {\n        growthFundShare = FullMath.mulDiv(amount, _allocatedGrowthFunds[feeToken], total * BIPS);\n        _allocatedGrowthFunds[feeToken] = 0;\n        daoFundShare = amount > growthFundShare ? amount - growthFundShare : 0;\n    }\n\n    function swapToRevenueToken(\n        address token,\n        uint256 amount,\n        uint256 minimumOutput,\n        address payable broker,\n        bytes calldata data\n    ) internal returns (uint256 output) {\n        IWETH weth = IWETH(wklay);\n        IERC20 revenue = IERC20(revenueToken);\n\n        // @dev revenue 토큰과 동일한 경우에는 스왑 스킵\n        if (token == address(revenue)) return amount;\n\n        uint256 prevAmount = revenue.balanceOf(address(this));\n\n        require(isVerifiedBroker[broker], \"NOT_VERIFIED_BROKER\");\n        {\n            bool success;\n            if (address(weth) == token) {\n                // unwrap first\n                weth.withdraw(amount);\n                (success, ) = broker.call{value: amount}(data);\n            } else {\n                // approve first\n                IERC20(token).approve(broker, amount);\n                (success, ) = broker.call(data);\n                IERC20(token).approve(broker, 0);\n            }\n            require(success, \"BROKER_FAIL\");\n        }\n\n        output = revenue.balanceOf(address(this)) - prevAmount;\n        require(output >= minimumOutput, \"SLIPPAGE\");\n        require(output >= minimumRevenue, \"MINIMUM REVENUE\");\n    }\n\n\n    /// @notice Callback 함수 (Pool에서 호출)\n    function collectFeeCallback(address[] memory tokens, uint256[] memory amounts) external {\n        address _pool = _msgSender();\n        require(cachedPool == _pool, \"NOT ALLOWED\");\n        for (uint256 i = 0; i < tokens.length; i++) {\n            address token = tokens[i];\n            uint256 amount = amounts[i];\n\n            // @dev skip if amount == 0\n            if (amount == 0) continue;\n\n            // @dev feeToken 등록\n            if (!isFee[token]) {\n                _feeTokens.push(token);\n                isFee[token] = true;\n            }\n\n            // @dev growthFund Rate 적용하여 할당\n            _allocatedGrowthFunds[token] += amount * getGrowthFundRate(_pool);\n\n            emit Collect(_pool, token, amount);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Multicall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\nabstract contract Multicall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n}\n"
    },
    "contracts/interfaces/IProtocolFeePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\ninterface IProtocolFeePool {\n    function collectProtocolFee() external returns (uint128, uint128);\n\n    function getTokenProtocolFees() external view returns (uint128, uint128);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n\n    function depositTo(address to) external payable;\n\n    function withdrawTo(address payable to, uint256 value) external;\n}\n"
    },
    "contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\n/// @notice Math library that facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision.\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol.\n/// @dev Handles \"phantom overflow\", i.e., allows multiplication and division where an intermediate value overflows 256 bits.\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\n    /// @param a The multiplicand.\n    /// @param b The multiplier.\n    /// @param denominator The divisor.\n    /// @return result The 256-bit result.\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = a * b.\n            // Compute the product mod 2**256 and mod 2**256 - 1,\n            // then use the Chinese Remainder Theorem to reconstruct\n            // the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2**256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product.\n            uint256 prod1; // Most significant 256 bits of the product.\n            assembly {\n                let mm := mulmod(a, b, not(0))\n                prod0 := mul(a, b)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                require(denominator > 0);\n                assembly {\n                    result := div(prod0, denominator)\n                }\n                return result;\n            }\n            // Make sure the result is less than 2**256 -\n            // also prevents denominator == 0.\n            require(denominator > prod1);\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n            // Make division exact by subtracting the remainder from [prod1 prod0] -\n            // compute remainder using mulmod.\n            uint256 remainder;\n            assembly {\n                remainder := mulmod(a, b, denominator)\n            }\n            // Subtract 256 bit number from 512 bit number.\n            assembly {\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n            // Factor powers of two out of denominator -\n            // compute largest power of two divisor of denominator\n            // (always >= 1).\n            uint256 twos = uint256(-int256(denominator)) & denominator;\n            // Divide denominator by power of two.\n            assembly {\n                denominator := div(denominator, twos)\n            }\n            // Divide [prod1 prod0] by the factors of two.\n            assembly {\n                prod0 := div(prod0, twos)\n            }\n            // Shift in bits from prod1 into prod0. For this we need\n            // to flip `twos` such that it is 2**256 / twos -\n            // if twos is zero, then it becomes one.\n            assembly {\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n            prod0 |= prod1 * twos;\n            // Invert denominator mod 2**256 -\n            // now that denominator is an odd number, it has an inverse\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n            // Compute the inverse by starting with a seed that is correct\n            // for four bits. That is, denominator * inv = 1 mod 2**4.\n            uint256 inv = (3 * denominator) ^ 2;\n            // Now use Newton-Raphson iteration to improve the precision.\n            // Thanks to Hensel's lifting lemma, this also works in modular\n            // arithmetic, doubling the correct bits in each step.\n            inv *= 2 - denominator * inv; // Inverse mod 2**8.\n            inv *= 2 - denominator * inv; // Inverse mod 2**16.\n            inv *= 2 - denominator * inv; // Inverse mod 2**32.\n            inv *= 2 - denominator * inv; // Inverse mod 2**64.\n            inv *= 2 - denominator * inv; // Inverse mod 2**128.\n            inv *= 2 - denominator * inv; // Inverse mod 2**256.\n            // Because the division is now exact we can divide by multiplying\n            // with the modular inverse of denominator. This will give us the\n            // correct result modulo 2**256. Since the precoditions guarantee\n            // that the outcome is less than 2**256, this is the final result.\n            // We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inv;\n            return result;\n        }\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\n    /// @param a The multiplicand.\n    /// @param b The multiplier.\n    /// @param denominator The divisor.\n    /// @return result The 256-bit result.\n    function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        unchecked {\n            if (mulmod(a, b, denominator) != 0) {\n                require(result < type(uint256).max);\n                result++;\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IProtocolRevenueShare.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\ninterface IProtocolRevenueShareEvent {\n    // @notice 리워드 수집 시 호출\n    event Collect(address indexed pool, address indexed token, uint256 amount);\n\n    // @notice 토큰을 스왑 후 분배 시 호출\n    event Share(\n        address indexed feeToken,\n        address indexed revenueToken,\n        uint256 amount,\n        uint256 output,\n        uint256 growthFundShare,\n        uint256 daoFundShare\n    );\n\n    // @notice revenue Token 변경 시 호출\n    event SetRevenueToken(address token);\n\n    // @notice GrowthFund 변경 시 호출\n    event SetGrowthFund(address fund);\n\n    // @notice DaoFund 변경 시 호출\n    event SetDaoFund(address fund);\n\n    // @notice 최소 수익 기준 변경시 호출\n    event SetMinimumRevenue(uint256 amount);\n\n    // @notice Growth Fund Rate 변경시 호출\n    event SetGrowthFundRate(address pool, uint256 rate);\n\n    // @notice Factory Growth Fund Rate 변경시 호출\n    event SetFactoryGrowthFundRate(address factory, uint256 rate);\n\n    // @notice 브로커 verify 여부 변경 시 호출\n    event VerifyBroker(address broker, bool isVerified);\n}\n\ninterface IProtocolRevenueShare is IProtocolRevenueShareEvent {\n    // @notice 판게아스왑의 풀들에서부터 수수료 수취 호출\n    function collectByPage(uint256 start, uint256 limit) external;\n\n    // @notice 특정 풀에서 프로토콜 수익 모으기\n    function collectFrom(address pool) external;\n\n    // @notice 풀에서 발생한 수익을 스왑 후, Growth Fund와 Dao Fund로 분배\n    // @param feeToken 프로토콜에서 발생한 수익 토큰\n    // @param minimumOutput 스왑할 경우, 슬리피지를 고려한 output\n    // @param broker feeToken을 revenueToken으로 전환을 수행하는 컨트랙트 ( pangeaswap pool Router, swap Scanner, 1inch, ...)\n    // @param data broker 컨트랙트로의 콜백 데이터\n    function share(address feeToken, uint256 minimumOutput, address payable broker, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/StakedStone.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"./interfaces/IStakedStone.sol\";\nimport \"./libraries/FullMath.sol\";\nimport \"./libraries/FixedPoint.sol\";\n\n/**\n * StakedStone Contract created to distribute rewards to STONE holders\n\n [예치 프로세스]\n ==============\n\n StakedStone에 예치함으로써, STONE 홀더는 Pangeaswap에서 발생하는 수익들을 공유받을 수 있습니다.\n 유저가 예치한 자산을 빼려면 unstake을 호출 후, cooldown 기간이후에 withdraw할 수 있습니다.\n unstake 호출 후에는 유저는 claim할 수 없습니다.\n\n 1. Manager Side\n     stake() => unstake() =====> withdraw()\n                        ----------\n                       | cooldown | 기간 필요\n\n\n   - setCooldownPeriod(period)\n     : unstake에서 withdraw까지의 기간을 지정. default : 7 days 소요\n\n 1. Holder Side\n\n   - stake(amount)\n     : amount만큼의 STONE을 예치\n\n   - unstake(amount)\n     : 예치된 STONE에서 amount 만큼 인출\n\n   - unstakingRequestCounts(owner)\n     : 현재 owner가 요청한 unstaking request 갯수 ( withdraw하면 줄어듦)\n\n   - unstakingRequestByIndex(owner, index);\n     : 요청한 unstaking 정보 조회\n\n   - withdraw(requestId)\n     : cooldown 기간이 지난 unstaking request 호출해서 가져오기\n\n\n [배당 프로세스]\n ==============\n\n `배당`은 비정기적으로 프로토콜 수익을 Holder들에게 환원하는 프로세스로,\n 유저의 예치량과 예치 기간에 비례하여 프로토콜 수익을 나누어 준다.\n\n   1. Manager Side\n\n      배당금 집행일 확정         배당금 납입                      배당금 집행\n      setDividendRecordDate() => depositDividend(token,amount) => executeDividend();\n\n                              <= resetDividendRecordDate() : 집행전 배당금 취소;\n\n        - 집행시각 기준으로 account 별 지분율을 산출한다.\n        - 배당금이 납입되어야, 집행이 진행된다.\n        - 납입된 배당금은 전액 해당 배당금 분배에 사용된다.\n        - 집행 전까지 언제든 resetDividendRecordDate을 호출할 수 있으며, 납입된 배당금은 회수처리된다. (msg.sender로)\n\n   2. Holder Side\n\n      - allocatedDividend(epoch)\n        : 해당 epoch에서 받을 수 있는 배당금 토큰 조회\n\n      - claimDividend(epoch)\n        : 해당 epoch에 배치된 배당금을 수령\n\n [리워드 프로세스]\n ================\n\n `리워드`는 매주 배치되어 있는 거버넌스 토큰을 예치한 홀더에게 제공하는 프로세스로,\n 매 블럭마다 선형적으로 분배된다.\n\n    1. Manager Side\n\n       - depositReward(amount, startTime)\n         : 리워드 납입 (startTime에서 부터 1주일간 분배)\n\n       - cancelReward(amount, startTime)\n         : 분배되지 않은 주차의 리워드 회수\n\n    2. Holder Side\n\n      - claimableReward(owner)\n        : 현재 받을 수 있는 리워드 량 조회\n\n      - claimReward()\n        : 리워드 수령\n\n */\ncontract StakedStone is\n    Multicall,\n    AccessControlUpgradeable,\n    IStakedStone {\n    using SafeERC20 for IERC20;\n\n    bytes32 public constant MANAGER_ROLE = keccak256(abi.encode(\"MANAGER\"));\n\n    // @dev 주차 별 배치된 리워드 총액, (timestamp % 7 days) == 0의 값으로 입력해야 함.\n    mapping(uint256 => uint256) public totalRewardPerWeek;\n\n    uint256 private checkpoint;\n\n    uint256 private rewardGrowthGlobalLast;\n    uint256 private pendingReward;\n\n    uint256 private totalShare;\n\n    mapping(address => uint256) private _balanceOf;\n    uint256 private _totalSupply;\n\n    // @dev unstake 후 withdraw 가능할 때까지 기간 (초)\n    uint256 public cooldownPeriod;\n\n    address public stone;\n\n    // @dev Staked Stone 시작 시간\n    uint256 private openDate;\n\n    // @dev 배당 예정 정보 (미배당 상태)\n    Dividend private readyDividend;\n\n    // @dev 과거 배당 정보 (배당된 상태)\n    Dividend[] private _dividendHistory;\n\n    mapping(address => uint256) private _userLastRecordDate;\n    mapping(address => mapping(uint256 => DividendSnapshot)) private _userDividendSnapshot;\n\n    UnstakingRequest[] public unstakingRequests;\n    mapping(uint256 => address) public requestOwnerOf;\n    /**\n     * @notice Get the number of un-staking requests by owner\n     */\n    mapping(address => uint256) public unstakingRequestCounts;\n    mapping(address => mapping(uint256 => uint256)) private _ownedRequests;\n    mapping(uint256 => uint256) private _ownedRequestsIndex;\n\n    // @dev 유저의 리워드 스냅샷 정보, 이를 통해 받을 수 있는 리워드를 역산\n    mapping(address => RewardSnapshot) private _userRewardSnapshot;\n\n    /**\n     * @notice 유저별 수령한 누적 리워드(STONE)\n     */\n    mapping(address => uint256) public accumulativeUserReward;\n\n    receive() external payable {\n    }\n\n    function initialize(\n        address _stone,\n        uint256 _openDate\n    ) external initializer {\n        stone = _stone;\n        cooldownPeriod = 7 days;\n\n        openDate = _openDate;\n        checkpoint = _openDate;\n\n        __AccessControl_init();\n        _setupRole(AccessControlUpgradeable.DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    modifier updateUserSnapshot(address owner) {\n        uint256 growthGlobal = _updateGrowthGlobal();\n        _updateRewardSnapshot(owner, growthGlobal);\n        _updateDividendSnapshot(owner);\n\n        _;\n    }\n\n    /**\n     * @notice deposit the STONE to be distributed linearly for 1 week\n     * @param amount amount to deposit\n     * @param startTime The start time of distribution. should always satisfy UTC 00:00. (startTime % 604,800 == 0)\n     */\n    function depositReward(uint256 amount, uint256 startTime) external onlyRole(MANAGER_ROLE) {\n        require(startTime % 7 days == 0, \"startTime % 7 days != 0\");\n        require(startTime >= block.timestamp, \"TOO LATE\");\n\n        IERC20(stone).safeTransferFrom(msg.sender, address(this), amount);\n\n        totalRewardPerWeek[startTime] += amount;\n\n        emit DepositReward(msg.sender, startTime, amount);\n    }\n\n    /**\n     * @notice Retrieve undistributed STONE\n     */\n    function cancelReward(uint256 amount, uint256 startTime) external onlyRole(MANAGER_ROLE) {\n        require(startTime >= block.timestamp, \"TOO LATE\");\n\n        totalRewardPerWeek[startTime] -= amount;\n\n        IERC20(stone).transfer(msg.sender, amount);\n\n        emit CancelReward(msg.sender, startTime, amount);\n    }\n\n    /**\n     * @notice 배당 기준시각 셋팅하기\n     */\n    function setDividendRecordDate() external onlyRole(MANAGER_ROLE) {\n        require(block.timestamp >= openDate, \"NOT START\");\n        _updateGrowthGlobal();\n\n        require(readyDividend.recordDate == 0, \"ALREADY SET\");\n        require(totalShare > 0, \"TOTAL SHARE NOT ZERO\");\n\n        readyDividend.startDate = _dividendHistory.length > 0 ? _dividendHistory[_dividendHistory.length-1].recordDate : openDate;\n        readyDividend.recordDate = block.timestamp;\n        readyDividend.totalShare = totalShare;\n\n        emit SetDividend(\n            _dividendHistory.length,\n            readyDividend.startDate,\n            readyDividend.recordDate,\n            readyDividend.totalShare\n        );\n    }\n\n    /**\n     * @notice 배당 기준시각 파기하기\n     */\n    function resetDividendRecordDate() external onlyRole(MANAGER_ROLE) {\n        require(readyDividend.recordDate != 0, \"NOT SET\");\n\n        for (uint256 i = 0; i < readyDividend.tokens.length; i++) {\n            address token = readyDividend.tokens[i];\n            uint256 amount = readyDividend.amounts[i];\n            // @dev get the deposited dividend back\n            IERC20(token).safeTransfer(msg.sender, amount);\n        }\n\n        delete readyDividend;\n\n        emit ResetDividend(_dividendHistory.length);\n    }\n\n    /**\n     * @notice 배당금 납입하기\n     */\n    function depositDividend(\n        address token,\n        uint256 amount\n    ) external onlyRole(MANAGER_ROLE) {\n        require(readyDividend.recordDate != 0, \"NOT SET\");\n        require(amount > 0, \"NOT ZERO\");\n\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n\n        // @dev 배당 토큰 수는 1~2개로 이루어짐. 순회 구문으로도 gas efficient함\n        for (uint256 i = 0; i < readyDividend.tokens.length; i++) {\n            address _token = readyDividend.tokens[i];\n            if (_token != token) continue;\n\n            // @dev 이미 납입된 토큰이라면, 추가하지 않고, readyDividend에 추가한다\n            readyDividend.amounts[i] += amount;\n            emit DepositDividend(_dividendHistory.length, token, amount);\n            return;\n        }\n\n        // @dev 이미 납입되지 않은 토큰은 추가한다\n        readyDividend.tokens.push(token);\n        readyDividend.amounts.push(amount);\n\n        emit DepositDividend(_dividendHistory.length, token, amount);\n    }\n\n    /**\n     * @notice 배당 집행하기\n     */\n    function executeDividend() external onlyRole(MANAGER_ROLE) {\n        require(readyDividend.recordDate != 0, \"NOT SET\");\n        require(readyDividend.tokens.length > 0, \"NO DEPOSIT\");\n        _updateGrowthGlobal();\n\n        _dividendHistory.push(\n            Dividend(\n                readyDividend.startDate,\n                readyDividend.recordDate,\n                readyDividend.totalShare,\n                readyDividend.tokens,\n                readyDividend.amounts\n            )\n        );\n\n        totalShare -= readyDividend.totalShare;\n        delete readyDividend;\n\n        emit ExecuteDividend(\n            _dividendHistory.length - 1,\n            readyDividend.tokens,\n            readyDividend.amounts\n        );\n    }\n\n    /**\n     * @notice Sets period until un-staking requested amount is able to be withdrawn.\n     */\n    function setCooldownPeriod(uint256 period) external onlyRole(MANAGER_ROLE) {\n        uint256 prev = cooldownPeriod;\n        cooldownPeriod = period;\n\n        emit UpdateCoolDown(prev, period);\n    }\n\n    /**\n     * @notice calculate the balance staked by owner\n     */\n    function balanceOf(address owner) external view returns (uint256 amount) {\n        return _balanceOf[owner];\n    }\n\n    /**\n     * @notice total stone staked\n     */\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @notice Get the information of un-staking requests by owner\n     */\n    function unstakingRequestByIndex(address owner, uint256 index) external view returns (UnstakingRequest memory) {\n        uint256 requestId = _ownedRequests[owner][index];\n        return unstakingRequests[requestId];\n    }\n\n    /**\n     * @notice 집행된 배당 횟수\n     */\n    function totalDividendEpoch() external view returns (uint256) {\n        return _dividendHistory.length;\n    }\n\n    /**\n     * @notice 배당 예정 정보\n     */\n    function readyDividendInfo() external view returns (Dividend memory) {\n        return readyDividend;\n    }\n\n    /**\n     * @notice 배당금 정보\n     */\n    function dividendInfo(uint256 epoch) external view returns (Dividend memory) {\n        return _dividendHistory[epoch];\n    }\n\n    /**\n     * @notice Stakes Stone for msg.sender\n     */\n    function stake(uint256 amount) external updateUserSnapshot(msg.sender) {\n        require(block.timestamp >= openDate, \"NOT START\");\n        IERC20(stone).safeTransferFrom(msg.sender, address(this), amount);\n\n        _stake(msg.sender, amount);\n    }\n\n    function _stake(address owner, uint256 amount) internal {\n        _balanceOf[owner] += amount;\n        _totalSupply += amount;\n\n        emit Stake(owner, amount);\n    }\n\n    /**\n     * @notice request unstaking to msg.sender\n     */\n    function unstake(uint256 amount) external updateUserSnapshot(msg.sender) {\n        _balanceOf[msg.sender] -= amount;\n        _totalSupply -= amount;\n\n        uint256 requestId = unstakingRequests.length;\n        unstakingRequests.push(UnstakingRequest(requestId, amount, block.timestamp, false));\n\n        uint256 count = unstakingRequestCounts[msg.sender]++;\n\n        requestOwnerOf[requestId] = msg.sender;\n        _ownedRequests[msg.sender][count] = requestId;\n        _ownedRequestsIndex[requestId] = count;\n\n        emit Unstake(msg.sender, amount, requestId);\n    }\n\n    /**\n     * @notice withdraw unstaked Stone after cooldown\n     */\n    function withdraw(uint256 requestId) external returns (uint256 amount) {\n        UnstakingRequest memory request = unstakingRequests[requestId];\n        require(!request.isClaimed, \"ALREADY CLAIMED\");\n        require(requestOwnerOf[requestId] == msg.sender, \"NOT OWNER\");\n        require(request.requestTs + cooldownPeriod <= block.timestamp, \"NEED COOLDOWN\");\n        amount = request.amount;\n\n        IERC20(stone).safeTransfer(msg.sender, amount);\n\n        closeRequest(msg.sender, requestId);\n\n        emit Withdraw(msg.sender, amount);\n    }\n\n    function closeRequest(address owner, uint256 requestId) internal {\n        unstakingRequests[requestId].isClaimed = true;\n\n        // @dev ownedRequests에서 requestId 제거\n        uint256 lastRequestIndex = --unstakingRequestCounts[owner];\n        uint256 requestIndex = _ownedRequestsIndex[requestId];\n\n        if (requestIndex != lastRequestIndex) {\n            uint256 lastRequestId = _ownedRequests[owner][lastRequestIndex];\n\n            _ownedRequests[owner][requestIndex] = lastRequestId;\n            _ownedRequestsIndex[lastRequestId] = requestIndex;\n        }\n\n        delete _ownedRequestsIndex[requestIndex];\n        delete _ownedRequests[owner][lastRequestIndex];\n    }\n\n    /**\n     * @notice Re-stake claimable Stone\n     */\n    function reStake() external updateUserSnapshot(msg.sender) {\n        uint256 amount = _claimReward(msg.sender);\n        _stake(msg.sender, amount);\n    }\n\n    /**\n     * @notice claim allocated STONE reward\n     */\n    function claimReward() external updateUserSnapshot(msg.sender) returns (uint256 amount) {\n        amount = _claimReward(msg.sender);\n        IERC20(stone).safeTransfer(msg.sender, amount);\n    }\n\n    function _claimReward(address owner) internal returns (uint256 amount){\n        amount = _userRewardSnapshot[owner]._owed;\n        _userRewardSnapshot[owner]._owed = 0;\n        accumulativeUserReward[msg.sender] += amount;\n\n        emit Claim(msg.sender, amount);\n    }\n\n    /**\n     * @notice calculate claimable STONE reward\n     */\n    function claimableReward(address owner) external view returns (uint256) {\n        uint256 amount = _calculateRewardToDistribute() + pendingReward;\n        RewardSnapshot memory snapshot = _userRewardSnapshot[owner];\n\n        return FullMath.mulDiv(\n            _rewardGrowthGlobal(amount) - snapshot._growthGlobalLast, _balanceOf[owner], FixedPoint.Q96\n        ) + snapshot._owed;\n    }\n\n    /**\n     * @notice 배당금 수령하기\n     */\n    function claimDividend(uint256 epoch) external updateUserSnapshot(msg.sender) {\n        DividendSnapshot memory snapshot = _userDividendSnapshot[msg.sender][epoch];\n        require(!snapshot.isPaid, \"ALREADY PAID\");\n        require(snapshot.share > 0, \"NO SHARE\");\n\n        Dividend memory epochDividend = _dividendHistory[epoch];\n        uint256 epochTotalShare = epochDividend.totalShare;\n\n        for (uint256 i = 0; i < epochDividend.tokens.length; i++) {\n            address token = epochDividend.tokens[i];\n            uint256 amount = epochDividend.amounts[i];\n\n            uint256 userAmount = FullMath.mulDiv(\n                amount, snapshot.share, epochTotalShare\n            );\n\n            IERC20(token).safeTransfer(msg.sender, userAmount);\n\n            emit ClaimDividend(msg.sender, epoch, token, userAmount);\n        }\n\n        _userDividendSnapshot[msg.sender][epoch].isPaid = true;\n    }\n\n    /**\n     * @notice 주어진 배당 회차에 할당된 배당금액 계산\n     */\n    function allocatedDividend(address owner, uint256 epoch) external view returns (\n        bool isPaid,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) {\n        Dividend memory epochDividend = _dividendHistory[epoch];\n\n        tokens = epochDividend.tokens;\n        amounts = new uint256[](epochDividend.tokens.length);\n\n        isPaid = _userDividendSnapshot[owner][epoch].isPaid;\n\n        uint256 share = _calculateUserShare(owner, epoch, epochDividend);\n        if (share == 0) return (isPaid, tokens, amounts);\n\n        uint256 epochTotalShare = epochDividend.totalShare;\n        for (uint256 i = 0; i < amounts.length; i++) {\n            amounts[i] = FullMath.mulDiv(\n                epochDividend.amounts[i],\n                share,\n                epochTotalShare\n            );\n        }\n    }\n\n    function _updateGrowthGlobal() internal returns (uint256 growthGlobal) {\n        uint256 _checkpoint = checkpoint;\n        uint256 amount = _calculateRewardToDistribute();\n\n        amount = _updatePendingReward(amount);\n        growthGlobal = _rewardGrowthGlobal(amount);\n        rewardGrowthGlobalLast = growthGlobal;\n\n        // @dev Skip if the block has been updated in advance. (gas efficient policy)\n        if (_checkpoint >= block.timestamp) return growthGlobal;\n\n        totalShare += (block.timestamp - _checkpoint) * _totalSupply;\n        checkpoint = block.timestamp;\n    }\n\n    function _calculateUserShare(\n        address owner,\n        uint256 epoch,\n        Dividend memory epochDividend\n    ) private view returns (uint256 share) {\n        // first case, already settle\n        share = _userDividendSnapshot[owner][epoch].share;\n        if (share > 0) return share;\n\n        // if there is no balance, skip\n        uint256 balance = _balanceOf[owner];\n        if (balance == 0) return share;\n\n        // calculate previous user share\n        uint256 startDate = Math.max(_userLastRecordDate[owner], epochDividend.startDate);\n        if (epochDividend.recordDate <= startDate) return share;\n\n        return (epochDividend.recordDate - startDate) * balance;\n    }\n\n    function _updatePendingReward(uint256 amount) internal returns (uint256) {\n        if (_totalSupply == 0) {\n            // @dev Rewards accumulated while there is no staked supply\n            // are distributed later\n            pendingReward += amount;\n            return 0;\n        }\n\n        if (pendingReward > 0) {\n            // @dev add pendingReward if it remains\n            amount += pendingReward;\n            pendingReward = 0;\n        }\n\n        return amount;\n    }\n\n    function _updateDividendSnapshot(address owner) internal {\n        _updateUserShare(owner);\n        _userLastRecordDate[owner] = block.timestamp;\n    }\n\n    function _updateUserShare(address owner) internal {\n        uint256 balance = _balanceOf[owner];\n\n        // @dev skip to update user share\n        if (balance == 0) return;\n\n        uint256 lastRecordDate = _userLastRecordDate[owner];\n\n        // @dev there is no previous dividend\n        if (_dividendHistory.length == 0) {\n            _userDividendSnapshot[owner][0].share += (block.timestamp - lastRecordDate) * balance;\n            return;\n        }\n\n        uint256 index = _dividendHistory.length - 1;\n        Dividend memory dividend = _dividendHistory[index];\n\n        uint256 period = block.timestamp - Math.max(dividend.recordDate, lastRecordDate);\n        _userDividendSnapshot[owner][index+1].share += period * balance;\n\n        while (dividend.recordDate > lastRecordDate) {\n            period = dividend.recordDate - Math.max(dividend.startDate, lastRecordDate);\n            _userDividendSnapshot[owner][index].share += period * balance;\n\n            if (index == 0) break;\n\n            dividend = _dividendHistory[--index];\n        }\n    }\n\n    function _updateRewardSnapshot(address owner, uint256 growthGlobal) internal {\n        RewardSnapshot storage snapshot = _userRewardSnapshot[owner];\n        snapshot._owed += FullMath.mulDiv(\n            growthGlobal - snapshot._growthGlobalLast, _balanceOf[owner], FixedPoint.Q96\n        );\n        snapshot._growthGlobalLast = growthGlobal;\n    }\n\n    function _rewardGrowthGlobal(uint256 amount) private view returns (uint256 growthGlobal) {\n        growthGlobal = rewardGrowthGlobalLast;\n\n        if (amount > 0 && _totalSupply > 0) {\n            growthGlobal += FullMath.mulDiv(amount, FixedPoint.Q96, _totalSupply);\n        }\n    }\n\n    function _calculateRewardToDistribute() private view returns (uint256 amount) {\n        uint256 _checkpoint = checkpoint;\n        uint256 currentEpoch = (block.timestamp / 7 days) * 7 days;\n\n        // @dev 과거 미정산된 Reward 정산\n        if (_checkpoint < currentEpoch) {\n            uint256 _checkpointEpoch = (_checkpoint / 7 days) * 7 days;\n\n            for (uint256 _epoch = _checkpointEpoch; _epoch < currentEpoch; _epoch += 7 days) {\n                uint256 _nextEpoch = _epoch + 7 days;\n                amount += totalRewardPerWeek[_epoch] * (_nextEpoch - _checkpoint) / 7 days;\n                _checkpoint = _nextEpoch;\n            }\n        }\n\n        amount += (\n        totalRewardPerWeek[currentEpoch] * (block.timestamp - _checkpoint) / 7 days\n        );\n    }\n}\n"
    },
    "contracts/interfaces/IStakedStone.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\ninterface IStakedStoneStruct {\n    struct UnstakingRequest {\n        uint256 id;\n        uint256 amount;\n        uint256 requestTs;\n        bool isClaimed;\n    }\n\n    struct RewardSnapshot {\n        uint256 _growthGlobalLast;\n        uint256 _owed;\n    }\n\n    struct Dividend {\n        // @dev 배당금 분배 시작 시각\n        uint256 startDate;\n        // @dev 배당금 분배 마감 시각\n        uint256 recordDate;\n        // @dev 총 배당금 지분 크기 ( period * total Supply)\n        uint256 totalShare;\n        // @dev 지급된 배당금 토큰\n        address[] tokens;\n        // @dev 지급된 배당액\n        uint256[] amounts;\n    }\n\n    struct DividendSnapshot {\n        // @dev 지급 여부\n        bool isPaid;\n        // @dev 할당된 배당 비중\n        uint256 share;\n    }\n}\n\ninterface IStakedStoneEvent {\n    event Stake(address indexed owner, uint256 amount);\n\n    event Unstake(address indexed owner, uint256 amount, uint256 requestId);\n\n    event Withdraw(address indexed owner, uint256 amount);\n\n    event Claim(address indexed owner, uint256 amount);\n\n    event UpdateCoolDown(uint256 prev, uint256 curr);\n\n    event DepositReward(address indexed operator, uint256 indexed weekStartTime, uint256 amount);\n\n    event CancelReward(address indexed operator, uint256 indexed weekStartTime, uint256 amount);\n\n    event ClaimDividend(address indexed owner, uint256 indexed epoch, address token, uint256 amount);\n\n    event SetDividend(uint256 indexed dividendId, uint256 startTime, uint256 recordDate, uint256 totalShare);\n\n    event ResetDividend(uint256 indexed dividendId);\n\n    event DepositDividend(uint256 indexed dividendId, address token, uint256 amount);\n\n    event ExecuteDividend(uint256 indexed dividendId, address[] token, uint256[] amount);\n}\n\ninterface IStakedStone is IStakedStoneStruct, IStakedStoneEvent {\n    function balanceOf(address owner) external view returns (uint256 amount);\n\n    function totalSupply() external view returns (uint256);\n\n    function unstakingRequestCounts(address owner) external view returns (uint256);\n\n    function unstakingRequestByIndex(address owner, uint256 index) external view returns (UnstakingRequest memory);\n\n    function accumulativeUserReward(address owner) external view returns (uint256);\n\n    /**\n     * @notice 이때까지 총 배당 횟수\n     */\n    function totalDividendEpoch() external view returns (uint256);\n\n    /**\n     * @notice 해당 epoch에 배치된 배당금 조회\n     */\n    function dividendInfo(uint256 epoch) external view returns (Dividend memory);\n\n    /**\n     * @notice 예치 요청하기\n     */\n    function stake(uint256 amount) external;\n\n    /**\n     * @notice unstake 요청하기, cooldown 이후에 withdraw 가능\n     */\n    function unstake(uint256 amount) external;\n\n    /**\n     * @notice cooldown period가 지난 unstaking 요청에 대한 stone 인출하기\n     */\n    function withdraw(uint256 requestId) external returns (uint256);\n\n    /**\n     * @notice 리워드(스톤) 재예치하기\n     */\n    function reStake() external;\n\n    /**\n     * @notice 리워드(스톤) 수령하기\n     */\n    function claimReward() external returns (uint256);\n\n    /**\n     * @notice calculate claimable STONE reward\n     */\n    function claimableReward(address owner) external view returns (uint256);\n\n    /**\n     * @notice 배당금 수령\n     */\n    function claimDividend(uint256 epoch) external;\n\n    /**\n     * @notice 해당 epoch에 할당된 dividend 조회\n     */\n    function allocatedDividend(\n        address owner,\n        uint256 epoch\n    ) external view returns (bool isPaid, address[] memory tokens, uint256[] memory amounts);\n}\n"
    },
    "contracts/libraries/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\nlibrary FixedPoint {\n    uint8 internal constant Q128RES = 128;\n    uint8 internal constant Q96RES = 96;\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/test/Token.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract Token is ERC20 {\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {}\n\n    function mint(address to, uint256 amount) external {\n        _mint(to, amount);\n    }\n\n    function burn(address to, uint256 amount) external {\n        _burn(to, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 99999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}