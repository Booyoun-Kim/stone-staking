/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BigNumberish, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IStakedStoneInterface extends utils.Interface {
  functions: {};

  events: {
    "CancelReward(address,uint256,uint256)": EventFragment;
    "Claim(address,uint256)": EventFragment;
    "ClaimDividend(address,uint256,address,uint256)": EventFragment;
    "DepositReward(address,uint256,uint256)": EventFragment;
    "Stake(address,uint256)": EventFragment;
    "Unstake(address,uint256,uint256)": EventFragment;
    "UpdateCoolDown(uint256,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimDividend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCoolDown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type CancelRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { operator: string; weekStartTime: BigNumber; amount: BigNumber }
>;

export type CancelRewardEventFilter = TypedEventFilter<CancelRewardEvent>;

export type ClaimEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; amount: BigNumber }
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type ClaimDividendEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  { owner: string; epoch: BigNumber; token: string; amount: BigNumber }
>;

export type ClaimDividendEventFilter = TypedEventFilter<ClaimDividendEvent>;

export type DepositRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { operator: string; weekStartTime: BigNumber; amount: BigNumber }
>;

export type DepositRewardEventFilter = TypedEventFilter<DepositRewardEvent>;

export type StakeEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; amount: BigNumber }
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export type UnstakeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { owner: string; amount: BigNumber; requestId: BigNumber }
>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export type UpdateCoolDownEvent = TypedEvent<
  [BigNumber, BigNumber],
  { prev: BigNumber; curr: BigNumber }
>;

export type UpdateCoolDownEventFilter = TypedEventFilter<UpdateCoolDownEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IStakedStone extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakedStoneInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "CancelReward(address,uint256,uint256)"(
      operator?: string | null,
      weekStartTime?: BigNumberish | null,
      amount?: null
    ): CancelRewardEventFilter;
    CancelReward(
      operator?: string | null,
      weekStartTime?: BigNumberish | null,
      amount?: null
    ): CancelRewardEventFilter;

    "Claim(address,uint256)"(
      owner?: string | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(owner?: string | null, amount?: null): ClaimEventFilter;

    "ClaimDividend(address,uint256,address,uint256)"(
      owner?: string | null,
      epoch?: BigNumberish | null,
      token?: null,
      amount?: null
    ): ClaimDividendEventFilter;
    ClaimDividend(
      owner?: string | null,
      epoch?: BigNumberish | null,
      token?: null,
      amount?: null
    ): ClaimDividendEventFilter;

    "DepositReward(address,uint256,uint256)"(
      operator?: string | null,
      weekStartTime?: BigNumberish | null,
      amount?: null
    ): DepositRewardEventFilter;
    DepositReward(
      operator?: string | null,
      weekStartTime?: BigNumberish | null,
      amount?: null
    ): DepositRewardEventFilter;

    "Stake(address,uint256)"(
      owner?: string | null,
      amount?: null
    ): StakeEventFilter;
    Stake(owner?: string | null, amount?: null): StakeEventFilter;

    "Unstake(address,uint256,uint256)"(
      owner?: string | null,
      amount?: null,
      requestId?: null
    ): UnstakeEventFilter;
    Unstake(
      owner?: string | null,
      amount?: null,
      requestId?: null
    ): UnstakeEventFilter;

    "UpdateCoolDown(uint256,uint256)"(
      prev?: null,
      curr?: null
    ): UpdateCoolDownEventFilter;
    UpdateCoolDown(prev?: null, curr?: null): UpdateCoolDownEventFilter;

    "Withdraw(address,uint256)"(
      owner?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(owner?: string | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
