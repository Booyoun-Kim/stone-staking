/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IProtocolRevenueShareInterface extends utils.Interface {
  functions: {
    "collectByPage(uint256,uint256)": FunctionFragment;
    "collectFrom(address)": FunctionFragment;
    "share(address,uint256,address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collectByPage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "collectFrom", values: [string]): string;
  encodeFunctionData(
    functionFragment: "share",
    values: [string, BigNumberish, string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "collectByPage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "share", data: BytesLike): Result;

  events: {
    "Collect(address,address,uint256)": EventFragment;
    "SetDaoFund(address)": EventFragment;
    "SetFactoryGrowthFundRate(address,uint256)": EventFragment;
    "SetGrowthFund(address)": EventFragment;
    "SetGrowthFundRate(address,uint256)": EventFragment;
    "SetMinimumRevenue(uint256)": EventFragment;
    "SetRevenueToken(address)": EventFragment;
    "Share(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "VerifyBroker(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDaoFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFactoryGrowthFundRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGrowthFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGrowthFundRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinimumRevenue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRevenueToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Share"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifyBroker"): EventFragment;
}

export type CollectEvent = TypedEvent<
  [string, string, BigNumber],
  { pool: string; token: string; amount: BigNumber }
>;

export type CollectEventFilter = TypedEventFilter<CollectEvent>;

export type SetDaoFundEvent = TypedEvent<[string], { fund: string }>;

export type SetDaoFundEventFilter = TypedEventFilter<SetDaoFundEvent>;

export type SetFactoryGrowthFundRateEvent = TypedEvent<
  [string, BigNumber],
  { factory: string; rate: BigNumber }
>;

export type SetFactoryGrowthFundRateEventFilter =
  TypedEventFilter<SetFactoryGrowthFundRateEvent>;

export type SetGrowthFundEvent = TypedEvent<[string], { fund: string }>;

export type SetGrowthFundEventFilter = TypedEventFilter<SetGrowthFundEvent>;

export type SetGrowthFundRateEvent = TypedEvent<
  [string, BigNumber],
  { pool: string; rate: BigNumber }
>;

export type SetGrowthFundRateEventFilter =
  TypedEventFilter<SetGrowthFundRateEvent>;

export type SetMinimumRevenueEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type SetMinimumRevenueEventFilter =
  TypedEventFilter<SetMinimumRevenueEvent>;

export type SetRevenueTokenEvent = TypedEvent<[string], { token: string }>;

export type SetRevenueTokenEventFilter = TypedEventFilter<SetRevenueTokenEvent>;

export type ShareEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    feeToken: string;
    revenueToken: string;
    amount: BigNumber;
    output: BigNumber;
    growthFundShare: BigNumber;
    daoFundShare: BigNumber;
  }
>;

export type ShareEventFilter = TypedEventFilter<ShareEvent>;

export type VerifyBrokerEvent = TypedEvent<
  [string, boolean],
  { broker: string; isVerified: boolean }
>;

export type VerifyBrokerEventFilter = TypedEventFilter<VerifyBrokerEvent>;

export interface IProtocolRevenueShare extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IProtocolRevenueShareInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collectByPage(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectFrom(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    share(
      feeToken: string,
      minimumOutput: BigNumberish,
      broker: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  collectByPage(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectFrom(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  share(
    feeToken: string,
    minimumOutput: BigNumberish,
    broker: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collectByPage(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collectFrom(pool: string, overrides?: CallOverrides): Promise<void>;

    share(
      feeToken: string,
      minimumOutput: BigNumberish,
      broker: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Collect(address,address,uint256)"(
      pool?: string | null,
      token?: string | null,
      amount?: null
    ): CollectEventFilter;
    Collect(
      pool?: string | null,
      token?: string | null,
      amount?: null
    ): CollectEventFilter;

    "SetDaoFund(address)"(fund?: null): SetDaoFundEventFilter;
    SetDaoFund(fund?: null): SetDaoFundEventFilter;

    "SetFactoryGrowthFundRate(address,uint256)"(
      factory?: null,
      rate?: null
    ): SetFactoryGrowthFundRateEventFilter;
    SetFactoryGrowthFundRate(
      factory?: null,
      rate?: null
    ): SetFactoryGrowthFundRateEventFilter;

    "SetGrowthFund(address)"(fund?: null): SetGrowthFundEventFilter;
    SetGrowthFund(fund?: null): SetGrowthFundEventFilter;

    "SetGrowthFundRate(address,uint256)"(
      pool?: null,
      rate?: null
    ): SetGrowthFundRateEventFilter;
    SetGrowthFundRate(pool?: null, rate?: null): SetGrowthFundRateEventFilter;

    "SetMinimumRevenue(uint256)"(amount?: null): SetMinimumRevenueEventFilter;
    SetMinimumRevenue(amount?: null): SetMinimumRevenueEventFilter;

    "SetRevenueToken(address)"(token?: null): SetRevenueTokenEventFilter;
    SetRevenueToken(token?: null): SetRevenueTokenEventFilter;

    "Share(address,address,uint256,uint256,uint256,uint256)"(
      feeToken?: string | null,
      revenueToken?: string | null,
      amount?: null,
      output?: null,
      growthFundShare?: null,
      daoFundShare?: null
    ): ShareEventFilter;
    Share(
      feeToken?: string | null,
      revenueToken?: string | null,
      amount?: null,
      output?: null,
      growthFundShare?: null,
      daoFundShare?: null
    ): ShareEventFilter;

    "VerifyBroker(address,bool)"(
      broker?: null,
      isVerified?: null
    ): VerifyBrokerEventFilter;
    VerifyBroker(broker?: null, isVerified?: null): VerifyBrokerEventFilter;
  };

  estimateGas: {
    collectByPage(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectFrom(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    share(
      feeToken: string,
      minimumOutput: BigNumberish,
      broker: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collectByPage(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectFrom(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    share(
      feeToken: string,
      minimumOutput: BigNumberish,
      broker: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
