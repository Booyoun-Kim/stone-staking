/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PoolDashboardInterface extends utils.Interface {
  functions: {
    "airdropDistributor()": FunctionFragment;
    "cumulativeAirdrop(address)": FunctionFragment;
    "cumulativeFees(address)": FunctionFragment;
    "cumulativeTradingFees(address)": FunctionFragment;
    "cumulativeTradingVolume(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "masterDeployer()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "airdropDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeAirdrop",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeTradingFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeTradingVolume",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "masterDeployer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "airdropDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeTradingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeTradingVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterDeployer",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PoolDashboard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolDashboardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    airdropDistributor(overrides?: CallOverrides): Promise<[string]>;

    cumulativeAirdrop(
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { airdrop0: BigNumber; airdrop1: BigNumber }
    >;

    cumulativeFees(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { fee0: BigNumber; fee1: BigNumber }>;

    cumulativeTradingFees(
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tradingFee0: BigNumber;
        tradingFee1: BigNumber;
      }
    >;

    cumulativeTradingVolume(
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tradingVolume0: BigNumber;
        tradingVolume1: BigNumber;
      }
    >;

    initialize(
      _masterDeployer: string,
      _airdropDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    masterDeployer(overrides?: CallOverrides): Promise<[string]>;
  };

  airdropDistributor(overrides?: CallOverrides): Promise<string>;

  cumulativeAirdrop(
    pool: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { airdrop0: BigNumber; airdrop1: BigNumber }
  >;

  cumulativeFees(
    pool: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { fee0: BigNumber; fee1: BigNumber }>;

  cumulativeTradingFees(
    pool: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { tradingFee0: BigNumber; tradingFee1: BigNumber }
  >;

  cumulativeTradingVolume(
    pool: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      tradingVolume0: BigNumber;
      tradingVolume1: BigNumber;
    }
  >;

  initialize(
    _masterDeployer: string,
    _airdropDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  masterDeployer(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    airdropDistributor(overrides?: CallOverrides): Promise<string>;

    cumulativeAirdrop(
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { airdrop0: BigNumber; airdrop1: BigNumber }
    >;

    cumulativeFees(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { fee0: BigNumber; fee1: BigNumber }>;

    cumulativeTradingFees(
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tradingFee0: BigNumber;
        tradingFee1: BigNumber;
      }
    >;

    cumulativeTradingVolume(
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tradingVolume0: BigNumber;
        tradingVolume1: BigNumber;
      }
    >;

    initialize(
      _masterDeployer: string,
      _airdropDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    masterDeployer(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    airdropDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeAirdrop(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeFees(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeTradingFees(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeTradingVolume(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _masterDeployer: string,
      _airdropDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    masterDeployer(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    airdropDistributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeAirdrop(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeFees(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeTradingFees(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeTradingVolume(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _masterDeployer: string,
      _airdropDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    masterDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
