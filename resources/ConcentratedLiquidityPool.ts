/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type MintParamsStruct = {
  lowerOld: BigNumberish;
  lower: BigNumberish;
  upperOld: BigNumberish;
  upper: BigNumberish;
  amount0Desired: BigNumberish;
  amount1Desired: BigNumberish;
};

export type MintParamsStructOutput = [
  number,
  number,
  number,
  number,
  BigNumber,
  BigNumber
] & {
  lowerOld: number;
  lower: number;
  upperOld: number;
  upper: number;
  amount0Desired: BigNumber;
  amount1Desired: BigNumber;
};

export interface ConcentratedLiquidityPoolInterface extends utils.Interface {
  functions: {
    "airdrop0PerSecond()": FunctionFragment;
    "airdrop1PerSecond()": FunctionFragment;
    "airdropPeriod()": FunctionFragment;
    "airdropStartTime()": FunctionFragment;
    "burn(int24,int24,uint128)": FunctionFragment;
    "collect(int24,int24,uint256,uint256)": FunctionFragment;
    "collectProtocolFee()": FunctionFragment;
    "createdBlockNumber()": FunctionFragment;
    "createdTime()": FunctionFragment;
    "depositAirdrop(uint128,uint128,uint256,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "feeGrowthGlobal0()": FunctionFragment;
    "feeGrowthGlobal1()": FunctionFragment;
    "flash(address,uint256,uint256,bytes)": FunctionFragment;
    "getAssets()": FunctionFragment;
    "getImmutables()": FunctionFragment;
    "getPriceAndNearestTicks()": FunctionFragment;
    "getReserves()": FunctionFragment;
    "getSecondsGrowthAndLastObservation()": FunctionFragment;
    "getTokenProtocolFees()": FunctionFragment;
    "liquidity()": FunctionFragment;
    "mint((int24,int24,int24,int24,uint128,uint128))": FunctionFragment;
    "nearestTick()": FunctionFragment;
    "positions(address,int24,int24)": FunctionFragment;
    "price()": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "rangeFeeGrowth(int24,int24)": FunctionFragment;
    "registerLogger(address)": FunctionFragment;
    "setPrice(uint160)": FunctionFragment;
    "swap(bytes)": FunctionFragment;
    "swapFee()": FunctionFragment;
    "swapFeeGrowthGlobal0()": FunctionFragment;
    "swapFeeGrowthGlobal1()": FunctionFragment;
    "tickSpacing()": FunctionFragment;
    "ticks(int24)": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
    "totalTicks()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "airdrop0PerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdrop1PerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createdBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createdTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositAirdrop",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeGrowthGlobal0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeGrowthGlobal1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flash",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getAssets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getImmutables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceAndNearestTicks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecondsGrowthAndLastObservation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenProtocolFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [MintParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "nearestTick",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rangeFeeGrowth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerLogger",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "swap", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "swapFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapFeeGrowthGlobal0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapFeeGrowthGlobal1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tickSpacing",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ticks", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalTicks",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "airdrop0PerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdrop1PerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createdBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createdTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeGrowthGlobal0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeGrowthGlobal1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getImmutables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceAndNearestTicks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecondsGrowthAndLastObservation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nearestTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rangeFeeGrowth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerLogger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapFeeGrowthGlobal0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFeeGrowthGlobal1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalTicks", data: BytesLike): Result;

  events: {};
}

export interface ConcentratedLiquidityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConcentratedLiquidityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    airdrop0PerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    airdrop1PerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    airdropPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    airdropStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      lower: BigNumberish,
      upper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collect(
      lower: BigNumberish,
      upper: BigNumberish,
      desiredToken0Fees: BigNumberish,
      desiredToken1Fees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectProtocolFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createdBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    createdTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositAirdrop(
      airdrop0: BigNumberish,
      airdrop1: BigNumberish,
      startTime: BigNumberish,
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    feeGrowthGlobal0(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeGrowthGlobal1(overrides?: CallOverrides): Promise<[BigNumber]>;

    flash(
      recipient: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAssets(
      overrides?: CallOverrides
    ): Promise<[string[]] & { assets: string[] }>;

    getImmutables(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, string, string, string, string] & {
        _MAX_TICK_LIQUIDITY: BigNumber;
        _tickSpacing: number;
        _swapFee: number;
        _factory: string;
        _masterDeployer: string;
        _token0: string;
        _token1: string;
      }
    >;

    getPriceAndNearestTicks(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { _price: BigNumber; _nearestTick: number }
    >;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _reserve0: BigNumber; _reserve1: BigNumber }
    >;

    getSecondsGrowthAndLastObservation(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        _secondsGrowthGlobal: BigNumber;
        _lastObservation: number;
      }
    >;

    getTokenProtocolFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _token0ProtocolFee: BigNumber;
        _token1ProtocolFee: BigNumber;
      }
    >;

    liquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      mintParams: MintParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nearestTick(overrides?: CallOverrides): Promise<[number]>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        feeGrowthInside0Last: BigNumber;
        feeGrowthInside1Last: BigNumber;
        feeOwed0: BigNumber;
        feeOwed1: BigNumber;
      }
    >;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    rangeFeeGrowth(
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeGrowthInside0: BigNumber;
        feeGrowthInside1: BigNumber;
      }
    >;

    registerLogger(
      _logger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFee(overrides?: CallOverrides): Promise<[number]>;

    swapFeeGrowthGlobal0(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapFeeGrowthGlobal1(overrides?: CallOverrides): Promise<[BigNumber]>;

    tickSpacing(overrides?: CallOverrides): Promise<[number]>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        previousTick: number;
        nextTick: number;
        liquidity: BigNumber;
        feeGrowthOutside0: BigNumber;
        feeGrowthOutside1: BigNumber;
        secondsGrowthOutside: BigNumber;
      }
    >;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    totalTicks(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  airdrop0PerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  airdrop1PerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  airdropPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  airdropStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    lower: BigNumberish,
    upper: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collect(
    lower: BigNumberish,
    upper: BigNumberish,
    desiredToken0Fees: BigNumberish,
    desiredToken1Fees: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectProtocolFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createdBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  createdTime(overrides?: CallOverrides): Promise<BigNumber>;

  depositAirdrop(
    airdrop0: BigNumberish,
    airdrop1: BigNumberish,
    startTime: BigNumberish,
    period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  feeGrowthGlobal0(overrides?: CallOverrides): Promise<BigNumber>;

  feeGrowthGlobal1(overrides?: CallOverrides): Promise<BigNumber>;

  flash(
    recipient: string,
    amount0: BigNumberish,
    amount1: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAssets(overrides?: CallOverrides): Promise<string[]>;

  getImmutables(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, string, string, string, string] & {
      _MAX_TICK_LIQUIDITY: BigNumber;
      _tickSpacing: number;
      _swapFee: number;
      _factory: string;
      _masterDeployer: string;
      _token0: string;
      _token1: string;
    }
  >;

  getPriceAndNearestTicks(
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { _price: BigNumber; _nearestTick: number }>;

  getReserves(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _reserve0: BigNumber; _reserve1: BigNumber }
  >;

  getSecondsGrowthAndLastObservation(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & {
      _secondsGrowthGlobal: BigNumber;
      _lastObservation: number;
    }
  >;

  getTokenProtocolFees(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _token0ProtocolFee: BigNumber;
      _token1ProtocolFee: BigNumber;
    }
  >;

  liquidity(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    mintParams: MintParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nearestTick(overrides?: CallOverrides): Promise<number>;

  positions(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      liquidity: BigNumber;
      feeGrowthInside0Last: BigNumber;
      feeGrowthInside1Last: BigNumber;
      feeOwed0: BigNumber;
      feeOwed1: BigNumber;
    }
  >;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  rangeFeeGrowth(
    lowerTick: BigNumberish,
    upperTick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      feeGrowthInside0: BigNumber;
      feeGrowthInside1: BigNumber;
    }
  >;

  registerLogger(
    _logger: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrice(
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFee(overrides?: CallOverrides): Promise<number>;

  swapFeeGrowthGlobal0(overrides?: CallOverrides): Promise<BigNumber>;

  swapFeeGrowthGlobal1(overrides?: CallOverrides): Promise<BigNumber>;

  tickSpacing(overrides?: CallOverrides): Promise<number>;

  ticks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      previousTick: number;
      nextTick: number;
      liquidity: BigNumber;
      feeGrowthOutside0: BigNumber;
      feeGrowthOutside1: BigNumber;
      secondsGrowthOutside: BigNumber;
    }
  >;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  totalTicks(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    airdrop0PerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    airdrop1PerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    airdropPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    airdropStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      lower: BigNumberish,
      upper: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        token0Amount: BigNumber;
        token1Amount: BigNumber;
      }
    >;

    collect(
      lower: BigNumberish,
      upper: BigNumberish,
      desiredToken0Fees: BigNumberish,
      desiredToken1Fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { token0Fees: BigNumber; token1Fees: BigNumber }
    >;

    collectProtocolFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    createdBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    createdTime(overrides?: CallOverrides): Promise<BigNumber>;

    depositAirdrop(
      airdrop0: BigNumberish,
      airdrop1: BigNumberish,
      startTime: BigNumberish,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    feeGrowthGlobal0(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal1(overrides?: CallOverrides): Promise<BigNumber>;

    flash(
      recipient: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getAssets(overrides?: CallOverrides): Promise<string[]>;

    getImmutables(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, string, string, string, string] & {
        _MAX_TICK_LIQUIDITY: BigNumber;
        _tickSpacing: number;
        _swapFee: number;
        _factory: string;
        _masterDeployer: string;
        _token0: string;
        _token1: string;
      }
    >;

    getPriceAndNearestTicks(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { _price: BigNumber; _nearestTick: number }
    >;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _reserve0: BigNumber; _reserve1: BigNumber }
    >;

    getSecondsGrowthAndLastObservation(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        _secondsGrowthGlobal: BigNumber;
        _lastObservation: number;
      }
    >;

    getTokenProtocolFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _token0ProtocolFee: BigNumber;
        _token1ProtocolFee: BigNumber;
      }
    >;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      mintParams: MintParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nearestTick(overrides?: CallOverrides): Promise<number>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        feeGrowthInside0Last: BigNumber;
        feeGrowthInside1Last: BigNumber;
        feeOwed0: BigNumber;
        feeOwed1: BigNumber;
      }
    >;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    rangeFeeGrowth(
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeGrowthInside0: BigNumber;
        feeGrowthInside1: BigNumber;
      }
    >;

    registerLogger(_logger: string, overrides?: CallOverrides): Promise<void>;

    setPrice(_price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    swap(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<number>;

    swapFeeGrowthGlobal0(overrides?: CallOverrides): Promise<BigNumber>;

    swapFeeGrowthGlobal1(overrides?: CallOverrides): Promise<BigNumber>;

    tickSpacing(overrides?: CallOverrides): Promise<number>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        previousTick: number;
        nextTick: number;
        liquidity: BigNumber;
        feeGrowthOutside0: BigNumber;
        feeGrowthOutside1: BigNumber;
        secondsGrowthOutside: BigNumber;
      }
    >;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    totalTicks(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    airdrop0PerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    airdrop1PerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    airdropPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    airdropStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      lower: BigNumberish,
      upper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collect(
      lower: BigNumberish,
      upper: BigNumberish,
      desiredToken0Fees: BigNumberish,
      desiredToken1Fees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectProtocolFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createdBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    createdTime(overrides?: CallOverrides): Promise<BigNumber>;

    depositAirdrop(
      airdrop0: BigNumberish,
      airdrop1: BigNumberish,
      startTime: BigNumberish,
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal0(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal1(overrides?: CallOverrides): Promise<BigNumber>;

    flash(
      recipient: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getImmutables(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceAndNearestTicks(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    getSecondsGrowthAndLastObservation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenProtocolFees(overrides?: CallOverrides): Promise<BigNumber>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      mintParams: MintParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nearestTick(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    rangeFeeGrowth(
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerLogger(
      _logger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    swapFeeGrowthGlobal0(overrides?: CallOverrides): Promise<BigNumber>;

    swapFeeGrowthGlobal1(overrides?: CallOverrides): Promise<BigNumber>;

    tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;

    ticks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    totalTicks(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    airdrop0PerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airdrop1PerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airdropPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airdropStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      lower: BigNumberish,
      upper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      lower: BigNumberish,
      upper: BigNumberish,
      desiredToken0Fees: BigNumberish,
      desiredToken1Fees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectProtocolFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createdBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createdTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositAirdrop(
      airdrop0: BigNumberish,
      airdrop1: BigNumberish,
      startTime: BigNumberish,
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeGrowthGlobal0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeGrowthGlobal1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flash(
      recipient: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getImmutables(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceAndNearestTicks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSecondsGrowthAndLastObservation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenProtocolFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      mintParams: MintParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nearestTick(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rangeFeeGrowth(
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerLogger(
      _logger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapFeeGrowthGlobal0(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapFeeGrowthGlobal1(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tickSpacing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTicks(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
