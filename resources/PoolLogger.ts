/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type LiquidityLoggingParamsStruct = {
  lower: BigNumberish;
  upper: BigNumberish;
  amount0: BigNumberish;
  amount1: BigNumberish;
  liquidity: BigNumberish;
};

export type LiquidityLoggingParamsStructOutput = [
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  lower: number;
  upper: number;
  amount0: BigNumber;
  amount1: BigNumber;
  liquidity: BigNumber;
};

export type CollectLoggingParamsStruct = {
  amount0: BigNumberish;
  amount1: BigNumberish;
};

export type CollectLoggingParamsStructOutput = [BigNumber, BigNumber] & {
  amount0: BigNumber;
  amount1: BigNumber;
};

export type FlashLoggingParamsStruct = {
  sender: string;
  amount0: BigNumberish;
  amount1: BigNumberish;
  paid0: BigNumberish;
  paid1: BigNumberish;
};

export type FlashLoggingParamsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  sender: string;
  amount0: BigNumber;
  amount1: BigNumber;
  paid0: BigNumber;
  paid1: BigNumber;
};

export type SwapLoggingParamsStruct = {
  zeroForOne: boolean;
  amountIn: BigNumberish;
  amountOut: BigNumberish;
};

export type SwapLoggingParamsStructOutput = [boolean, BigNumber, BigNumber] & {
  zeroForOne: boolean;
  amountIn: BigNumber;
  amountOut: BigNumber;
};

export interface PoolLoggerInterface extends utils.Interface {
  functions: {
    "emitBurn((int24,int24,uint256,uint256,uint256))": FunctionFragment;
    "emitCollect((uint256,uint256))": FunctionFragment;
    "emitFlash((address,uint256,uint256,uint256,uint256))": FunctionFragment;
    "emitMint((int24,int24,uint256,uint256,uint256))": FunctionFragment;
    "emitSwap((bool,uint256,uint256))": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "masterDeployer()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "emitBurn",
    values: [LiquidityLoggingParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "emitCollect",
    values: [CollectLoggingParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "emitFlash",
    values: [FlashLoggingParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "emitMint",
    values: [LiquidityLoggingParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "emitSwap",
    values: [SwapLoggingParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "masterDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "emitBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitCollect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emitFlash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Burn(address,int24,int24,uint256,uint256,uint256)": EventFragment;
    "Collect(address,uint256,uint256)": EventFragment;
    "Flash(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Mint(address,int24,int24,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Swap(address,bool,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export type BurnEvent = TypedEvent<
  [string, number, number, BigNumber, BigNumber, BigNumber],
  {
    pool: string;
    lower: number;
    upper: number;
    amount0: BigNumber;
    amount1: BigNumber;
    liquidity: BigNumber;
  }
>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export type CollectEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { pool: string; amount0: BigNumber; amount1: BigNumber }
>;

export type CollectEventFilter = TypedEventFilter<CollectEvent>;

export type FlashEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    pool: string;
    sender: string;
    amount0: BigNumber;
    amount1: BigNumber;
    paid0: BigNumber;
    paid1: BigNumber;
  }
>;

export type FlashEventFilter = TypedEventFilter<FlashEvent>;

export type MintEvent = TypedEvent<
  [string, number, number, BigNumber, BigNumber, BigNumber],
  {
    pool: string;
    lower: number;
    upper: number;
    amount0: BigNumber;
    amount1: BigNumber;
    liquidity: BigNumber;
  }
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SwapEvent = TypedEvent<
  [string, boolean, BigNumber, BigNumber],
  {
    pool: string;
    zeroForOne: boolean;
    amountIn: BigNumber;
    amountOut: BigNumber;
  }
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface PoolLogger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolLoggerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    emitBurn(
      params: LiquidityLoggingParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emitCollect(
      params: CollectLoggingParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emitFlash(
      params: FlashLoggingParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emitMint(
      params: LiquidityLoggingParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emitSwap(
      params: SwapLoggingParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _masterDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    masterDeployer(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  emitBurn(
    params: LiquidityLoggingParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emitCollect(
    params: CollectLoggingParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emitFlash(
    params: FlashLoggingParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emitMint(
    params: LiquidityLoggingParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emitSwap(
    params: SwapLoggingParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _masterDeployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  masterDeployer(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    emitBurn(
      params: LiquidityLoggingParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emitCollect(
      params: CollectLoggingParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emitFlash(
      params: FlashLoggingParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emitMint(
      params: LiquidityLoggingParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emitSwap(
      params: SwapLoggingParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _masterDeployer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    masterDeployer(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Burn(address,int24,int24,uint256,uint256,uint256)"(
      pool?: string | null,
      lower?: null,
      upper?: null,
      amount0?: null,
      amount1?: null,
      liquidity?: null
    ): BurnEventFilter;
    Burn(
      pool?: string | null,
      lower?: null,
      upper?: null,
      amount0?: null,
      amount1?: null,
      liquidity?: null
    ): BurnEventFilter;

    "Collect(address,uint256,uint256)"(
      pool?: string | null,
      amount0?: null,
      amount1?: null
    ): CollectEventFilter;
    Collect(
      pool?: string | null,
      amount0?: null,
      amount1?: null
    ): CollectEventFilter;

    "Flash(address,address,uint256,uint256,uint256,uint256)"(
      pool?: string | null,
      sender?: string | null,
      amount0?: null,
      amount1?: null,
      paid0?: null,
      paid1?: null
    ): FlashEventFilter;
    Flash(
      pool?: string | null,
      sender?: string | null,
      amount0?: null,
      amount1?: null,
      paid0?: null,
      paid1?: null
    ): FlashEventFilter;

    "Mint(address,int24,int24,uint256,uint256,uint256)"(
      pool?: string | null,
      lower?: null,
      upper?: null,
      amount0?: null,
      amount1?: null,
      liquidity?: null
    ): MintEventFilter;
    Mint(
      pool?: string | null,
      lower?: null,
      upper?: null,
      amount0?: null,
      amount1?: null,
      liquidity?: null
    ): MintEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Swap(address,bool,uint256,uint256)"(
      pool?: string | null,
      zeroForOne?: null,
      amountIn?: null,
      amountOut?: null
    ): SwapEventFilter;
    Swap(
      pool?: string | null,
      zeroForOne?: null,
      amountIn?: null,
      amountOut?: null
    ): SwapEventFilter;
  };

  estimateGas: {
    emitBurn(
      params: LiquidityLoggingParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emitCollect(
      params: CollectLoggingParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emitFlash(
      params: FlashLoggingParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emitMint(
      params: LiquidityLoggingParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emitSwap(
      params: SwapLoggingParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _masterDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    masterDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    emitBurn(
      params: LiquidityLoggingParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emitCollect(
      params: CollectLoggingParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emitFlash(
      params: FlashLoggingParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emitMint(
      params: LiquidityLoggingParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emitSwap(
      params: SwapLoggingParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _masterDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    masterDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
