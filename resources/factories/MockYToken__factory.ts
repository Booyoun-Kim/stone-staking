/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockYToken, MockYTokenInterface } from "../MockYToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getKlayByShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getSharesByKlay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "increaseTotalStaking",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "sharesOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "stakeFor",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingSharesRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStaking",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052670de0b6b3a76400006007553480156200001d57600080fd5b506040805180820182526004808252634d4f434b60e01b6020808401828152855180870190965292855284015281519192916200005d916003916200007c565b508051620000739060049060208401906200007c565b5050506200015f565b8280546200008a9062000122565b90600052602060002090601f016020900481019282620000ae5760008555620000f9565b82601f10620000c957805160ff1916838001178555620000f9565b82800160010185558215620000f9579182015b82811115620000f9578251825591602001919060010190620000dc565b50620001079291506200010b565b5090565b5b808211156200010757600081556001016200010c565b600181811c908216806200013757607f821691505b602082108114156200015957634e487b7160e01b600052602260045260246000fd5b50919050565b61104a806200016f6000396000f3fe60806040526004361061016e5760003560e01c80633a98ef39116100cb578063a457c2d71161007f578063dd62ed3e11610059578063dd62ed3e14610388578063e2ee16b6146103db578063f5eb42dc146103fb57600080fd5b8063a457c2d714610328578063a9059cbb14610348578063b31c90d41461036857600080fd5b806362490222116100b057806362490222146102d357806370a08231146102f357806395d89b411461031357600080fd5b80633a98ef39146102aa5780634bf69206146102c057600080fd5b806323b872dd11610122578063313ce56711610107578063313ce5671461026657806339509351146102825780633a4b66f1146102a257600080fd5b806323b872dd146102245780632e17de781461024457600080fd5b80630b3b2e92116101535780630b3b2e92146101d5578063165defa4146101f957806318160ddd1461020f57600080fd5b806306fdde031461017a578063095ea7b3146101a557600080fd5b3661017557005b600080fd5b34801561018657600080fd5b5061018f61043e565b60405161019c9190610d7a565b60405180910390f35b3480156101b157600080fd5b506101c56101c0366004610e16565b6104d0565b604051901515815260200161019c565b3480156101e157600080fd5b506101eb60075481565b60405190815260200161019c565b34801561020557600080fd5b506101eb60065481565b34801561021b57600080fd5b506006546101eb565b34801561023057600080fd5b506101c561023f366004610e40565b6104e8565b34801561025057600080fd5b5061026461025f366004610e7c565b61050c565b005b34801561027257600080fd5b506040516012815260200161019c565b34801561028e57600080fd5b506101c561029d366004610e16565b610518565b610264610564565b3480156102b657600080fd5b506101eb60055481565b6102646102ce366004610e95565b610570565b3480156102df57600080fd5b506101eb6102ee366004610e7c565b61057a565b3480156102ff57600080fd5b506101eb61030e366004610e95565b61058b565b34801561031f57600080fd5b5061018f6105ba565b34801561033457600080fd5b506101c5610343366004610e16565b6105c9565b34801561035457600080fd5b506101c5610363366004610e16565b61069f565b34801561037457600080fd5b506101eb610383366004610e7c565b6106ad565b34801561039457600080fd5b506101eb6103a3366004610eb7565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b3480156103e757600080fd5b506102646103f6366004610e7c565b6106b8565b34801561040757600080fd5b506101eb610416366004610e95565b73ffffffffffffffffffffffffffffffffffffffff1660009081526008602052604090205490565b60606003805461044d90610eea565b80601f016020809104026020016040519081016040528092919081815260200182805461047990610eea565b80156104c65780601f1061049b576101008083540402835291602001916104c6565b820191906000526020600020905b8154815290600101906020018083116104a957829003601f168201915b5050505050905090565b6000336104de818585610703565b5060019392505050565b6000336104f68582856108b7565b61050185858561098e565b506001949350505050565b61051581610a00565b50565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906104de908290869061055f908790610f6d565b610703565b61056e3334610a7a565b565b6105158134610a7a565b600061058582610af3565b92915050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526008602052604081205461058590610b30565b60606004805461044d90610eea565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610692576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6105018286868403610703565b6000336104de81858561098e565b600061058582610b30565b80600660008282546106ca9190610f6d565b909155505060055415610515576005546006546106f3906b033b2e3c9fd0803ce8000000610f85565b6106fd9190610fc2565b60075550565b73ffffffffffffffffffffffffffffffffffffffff83166107a5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610689565b73ffffffffffffffffffffffffffffffffffffffff8216610848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610689565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610988578181101561097b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610689565b6109888484848403610703565b50505050565b6109a1838361099c84610af3565b610b4d565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516108aa91815260200190565b336000610a0c83610af3565b9050610a188282610c53565b8260066000828254610a2a9190610ffd565b909155505060405183815260009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016108aa565b6000610a8582610af3565b9050610a918382610d33565b8160066000828254610aa39190610f6d565b909155505060405182815273ffffffffffffffffffffffffffffffffffffffff8416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016108aa565b600754600090600181610b12856b033b2e3c9fd0803ce8000000610f85565b610b1c9190610f6d565b610b269190610ffd565b6105859190610fc2565b60006b033b2e3c9fd0803ce800000060075483610b269190610f85565b73ffffffffffffffffffffffffffffffffffffffff831660009081526008602052604090205481811015610bdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f696e73756666696369656e7420736861726573000000000000000000000000006044820152606401610689565b610be78282610ffd565b73ffffffffffffffffffffffffffffffffffffffff8581166000908152600860205260408082209390935590851681522054610c238382610f6d565b73ffffffffffffffffffffffffffffffffffffffff90941660009081526008602052604090209390935550505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526008602052604090205481811015610ce3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f696e73756666696369656e7420736861726573000000000000000000000000006044820152606401610689565b8160056000828254610cf59190610ffd565b90915550610d0590508282610ffd565b73ffffffffffffffffffffffffffffffffffffffff9093166000908152600860205260409020929092555050565b8060056000828254610d459190610f6d565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260086020526040902054610d058282610f6d565b600060208083528351808285015260005b81811015610da757858101830151858201604001528201610d8b565b81811115610db9576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610e1157600080fd5b919050565b60008060408385031215610e2957600080fd5b610e3283610ded565b946020939093013593505050565b600080600060608486031215610e5557600080fd5b610e5e84610ded565b9250610e6c60208501610ded565b9150604084013590509250925092565b600060208284031215610e8e57600080fd5b5035919050565b600060208284031215610ea757600080fd5b610eb082610ded565b9392505050565b60008060408385031215610eca57600080fd5b610ed383610ded565b9150610ee160208401610ded565b90509250929050565b600181811c90821680610efe57607f821691505b60208210811415610f38577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610f8057610f80610f3e565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fbd57610fbd610f3e565b500290565b600082610ff8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008282101561100f5761100f610f3e565b50039056fea26469706673582212208e2fd35c67cb8d1efc3c6757b9284449383034af94fdcb35081a4e47ba34acda64736f6c63430008090033";

type MockYTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockYTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockYToken__factory extends ContractFactory {
  constructor(...args: MockYTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockYToken> {
    return super.deploy(overrides || {}) as Promise<MockYToken>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockYToken {
    return super.attach(address) as MockYToken;
  }
  connect(signer: Signer): MockYToken__factory {
    return super.connect(signer) as MockYToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockYTokenInterface {
    return new utils.Interface(_abi) as MockYTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockYToken {
    return new Contract(address, _abi, signerOrProvider) as MockYToken;
  }
}
