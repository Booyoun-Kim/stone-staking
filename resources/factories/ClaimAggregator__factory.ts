/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ClaimAggregator,
  ClaimAggregatorInterface,
} from "../ClaimAggregator";

const _abi = [
  {
    inputs: [],
    name: "NotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolManager",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "positionId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "bool",
        name: "unwrap",
        type: "bool",
      },
    ],
    name: "collect",
    outputs: [
      {
        internalType: "uint256",
        name: "token0Amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "token1Amount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolManager",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "positionId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "bool",
        name: "unwrap",
        type: "bool",
      },
    ],
    name: "collectReward",
    outputs: [
      {
        internalType: "uint256",
        name: "rewardAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d08806100206000396000f3fe60806040526004361061003f5760003560e01c80638129fc1c14610044578063ac9650d81461005b578063bd593d2314610084578063e13001b1146100b9575b600080fd5b34801561005057600080fd5b506100596100e7565b005b61006e610069366004610870565b610210565b60405161007b919061095f565b60405180910390f35b34801561009057600080fd5b506100a461009f366004610a01565b610382565b6040805192835260208301919091520161007b565b3480156100c557600080fd5b506100d96100d4366004610a01565b6104f8565b60405190815260200161007b565b600054610100900460ff166101025760005460ff1615610106565b303b155b610197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff161580156101d657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6101de61066a565b801561020d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b60608167ffffffffffffffff81111561022b5761022b610a59565b60405190808252806020026020018201604052801561025e57816020015b60608152602001906001900390816102495790505b50905060005b8281101561037b576000803086868581811061028257610282610a88565b90506020028101906102949190610ab7565b6040516102a2929190610b23565b600060405180830381855af49150503d80600081146102dd576040519150601f19603f3d011682016040523d82523d6000602084013e6102e2565b606091505b509150915081610348576044815110156102fb57600080fd5b600481019050808060200190518101906103159190610b33565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018e9190610bfe565b8084848151811061035b5761035b610a88565b60200260200101819052505050808061037390610c18565b915050610264565b5092915050565b600080600260015414156103f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161018e565b600260015561040286338761070b565b610438576040517f3d693ada00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f8c6ab0130000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff85811660248301528415156044830152871690638c6ab013906064016040805180830381600087803b1580156104af57600080fd5b505af11580156104c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e79190610c78565b600180559097909650945050505050565b600060026001541415610567576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161018e565b600260015561057785338661070b565b6105ad576040517f3d693ada00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f9399cc890000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff84811660248301528315156044830152861690639399cc8990606401602060405180830381600087803b15801561062557600080fd5b505af1158015610639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065d9190610c9c565b6001805595945050505050565b600054610100900460ff16610701576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161018e565b6107096107d3565b565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff861690636352211e9060240160206040518083038186803b15801561077657600080fd5b505afa15801561078a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ae9190610cb5565b73ffffffffffffffffffffffffffffffffffffffff8581169116149150509392505050565b600054610100900460ff1661086a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161018e565b60018055565b6000806020838503121561088357600080fd5b823567ffffffffffffffff8082111561089b57600080fd5b818501915085601f8301126108af57600080fd5b8135818111156108be57600080fd5b8660208260051b85010111156108d357600080fd5b60209290920196919550909350505050565b60005b838110156109005781810151838201526020016108e8565b8381111561090f576000848401525b50505050565b6000815180845261092d8160208601602086016108e5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156109d2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526109c0858351610915565b94509285019290850190600101610986565b5092979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461020d57600080fd5b60008060008060808587031215610a1757600080fd5b8435610a22816109df565b9350602085013592506040850135610a39816109df565b915060608501358015158114610a4e57600080fd5b939692955090935050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610aec57600080fd5b83018035915067ffffffffffffffff821115610b0757600080fd5b602001915036819003821315610b1c57600080fd5b9250929050565b8183823760009101908152919050565b600060208284031215610b4557600080fd5b815167ffffffffffffffff80821115610b5d57600080fd5b818401915084601f830112610b7157600080fd5b815181811115610b8357610b83610a59565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610bc957610bc9610a59565b81604052828152876020848701011115610be257600080fd5b610bf38360208301602088016108e5565b979650505050505050565b602081526000610c116020830184610915565b9392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c71577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b60008060408385031215610c8b57600080fd5b505080516020909101519092909150565b600060208284031215610cae57600080fd5b5051919050565b600060208284031215610cc757600080fd5b8151610c11816109df56fea26469706673582212201505ec2fb8a8ddd3ff8caa8223c1e5cd0aef1d9695aa3de5806622ce5c7b876264736f6c63430008090033";

type ClaimAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ClaimAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ClaimAggregator__factory extends ContractFactory {
  constructor(...args: ClaimAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ClaimAggregator> {
    return super.deploy(overrides || {}) as Promise<ClaimAggregator>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ClaimAggregator {
    return super.attach(address) as ClaimAggregator;
  }
  connect(signer: Signer): ClaimAggregator__factory {
    return super.connect(signer) as ClaimAggregator__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClaimAggregatorInterface {
    return new utils.Interface(_abi) as ClaimAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ClaimAggregator {
    return new Contract(address, _abi, signerOrProvider) as ClaimAggregator;
  }
}
