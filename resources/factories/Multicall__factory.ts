/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Multicall, MulticallInterface } from "../Multicall";

const _abi = [
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "gasLimit",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "gasUsed",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506106c9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630f28c97d146100465780631749e1e31461005b5780634d2301cc1461007c575b600080fd5b425b6040519081526020015b60405180910390f35b61006e61006936600461030e565b6100a4565b6040516100529291906104c7565b61004861008a3660046105a7565b73ffffffffffffffffffffffffffffffffffffffff163190565b8051439060609067ffffffffffffffff8111156100c3576100c361023e565b60405190808252806020026020018201604052801561011057816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816100e15790505b50905060005b835181101561023857600080858381518110610134576101346105c9565b602002602001015160000151868481518110610152576101526105c9565b6020026020010151604001519150915060005a90506000808473ffffffffffffffffffffffffffffffffffffffff168460405161018f91906105f8565b6000604051808303816000865af19150503d80600081146101cc576040519150601f19603f3d011682016040523d82523d6000602084013e6101d1565b606091505b509150915060005a6101e39085610643565b90506040518060600160405280841515815260200182815260200183815250888881518110610214576102146105c9565b602002602001018190525050505050505080806102309061065a565b915050610116565b50915091565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156102905761029061023e565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156102dd576102dd61023e565b604052919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461030957600080fd5b919050565b6000602080838503121561032157600080fd5b823567ffffffffffffffff8082111561033957600080fd5b818501915085601f83011261034d57600080fd5b81358181111561035f5761035f61023e565b8060051b61036e858201610296565b918252838101850191858101908984111561038857600080fd5b86860192505b8383101561048a578235858111156103a65760008081fd5b860160607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828d0381018213156103dd5760008081fd5b6103e561026d565b6103f08b85016102e5565b81526040848101358c83015292840135928984111561040f5760008081fd5b83850194508e603f86011261042657600093508384fd5b8b85013593508984111561043c5761043c61023e565b61044c8c84601f87011601610296565b92508383528e818587010111156104635760008081fd5b838186018d85013760009383018c019390935291820152835250918601919086019061038e565b9998505050505050505050565b60005b838110156104b257818101518382015260200161049a565b838111156104c1576000848401525b50505050565b6000604080830185845260208281860152818651808452606093508387019150838160051b88010183890160005b83811015610597578983037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0018552815180511515845286810151878501528801518884018890528051888501819052608061055682828801858c01610497565b96880196601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016949094019093019250908501906001016104f5565b50909a9950505050505050505050565b6000602082840312156105b957600080fd5b6105c2826102e5565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000825161060a818460208701610497565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561065557610655610614565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561068c5761068c610614565b506001019056fea26469706673582212203df49affac68c0bf7a4a1ffd75f1971aefc7a0b65bdc3872446626021f4abb9764736f6c63430008090033";

type MulticallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MulticallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall__factory extends ContractFactory {
  constructor(...args: MulticallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Multicall> {
    return super.deploy(overrides || {}) as Promise<Multicall>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Multicall {
    return super.attach(address) as Multicall;
  }
  connect(signer: Signer): Multicall__factory {
    return super.connect(signer) as Multicall__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallInterface {
    return new utils.Interface(_abi) as MulticallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall {
    return new Contract(address, _abi, signerOrProvider) as Multicall;
  }
}
