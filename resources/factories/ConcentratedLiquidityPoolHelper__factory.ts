/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ConcentratedLiquidityPoolHelper,
  ConcentratedLiquidityPoolHelperInterface,
} from "../ConcentratedLiquidityPoolHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IConcentratedLiquidityPool",
        name: "pool",
        type: "address",
      },
    ],
    name: "getTickState",
    outputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "index",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
        ],
        internalType: "struct ConcentratedLiquidityPoolHelper.SimpleTick[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IConcentratedLiquidityPool",
        name: "pool",
        type: "address",
      },
    ],
    name: "getTickStateDetail",
    outputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "index",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "feeGrowthOutside0",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthOutside1",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "secondsGrowthOutside",
            type: "uint160",
          },
        ],
        internalType: "struct ConcentratedLiquidityPoolHelper.DetailTick[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610bea806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806370b5e1111461003b5780639d0cd48c14610064575b600080fd5b61004e61004936600461089f565b610084565b60405161005b91906108c3565b60405180910390f35b61007761007236600461089f565b61041c565b60405161005b919061095c565b606060006100918361072e565b67ffffffffffffffff8111156100a9576100a96109b3565b60405190808252806020026020018201604052801561012057816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816100c75790505b506040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290529192507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276185b6101a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610a11565b60020b8160020b146102eb576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600282900b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561021557600080fd5b505afa158015610229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024d9190610a92565b92506040518060a001604052808260020b815260200184604001516fffffffffffffffffffffffffffffffff16815260200184606001518152602001846080015181526020018460a0015173ffffffffffffffffffffffffffffffffffffffff168152508483806102bd90610b4a565b945062ffffff16815181106102d4576102d4610b6d565b602002602001018190525082602001519050610177565b6040517ff30dba93000000000000000000000000000000000000000000000000000000008152600282900b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561035457600080fd5b505afa158015610368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038c9190610a92565b92506040518060a001604052808260020b815260200184604001516fffffffffffffffffffffffffffffffff16815260200184606001518152602001846080015181526020018460a0015173ffffffffffffffffffffffffffffffffffffffff16815250848362ffffff168151811061040757610407610b6d565b60209081029190910101525091949350505050565b606060006104298361072e565b67ffffffffffffffff811115610441576104416109b3565b60405190808252806020026020018201604052801561048657816020015b604080518082019091526000808252602082015281526020019060019003908161045f5790505b506040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290529192507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276185b6105067ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610a11565b60020b8160020b1461061d576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600282900b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561057b57600080fd5b505afa15801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190610a92565b925060405180604001604052808260020b815260200184604001516fffffffffffffffffffffffffffffffff168152508483806105ef90610b4a565b945062ffffff168151811061060657610606610b6d565b6020026020010181905250826020015190506104dd565b6040517ff30dba93000000000000000000000000000000000000000000000000000000008152600282900b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561068657600080fd5b505afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190610a92565b925060405180604001604052807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186106f590610a11565b60020b815260200184604001516fffffffffffffffffffffffffffffffff16815250848362ffffff168151811061040757610407610b6d565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101829052600191507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276185b6107ae7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610a11565b60020b8160020b14610873576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600282900b600482015273ffffffffffffffffffffffffffffffffffffffff85169063f30dba939060240160c06040518083038186803b15801561082357600080fd5b505afa158015610837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085b9190610a92565b60200151905061086c600184610b9c565b9250610785565b5050919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461089c57600080fd5b50565b6000602082840312156108b157600080fd5b81356108bc8161087a565b9392505050565b602080825282518282018190526000919060409081850190868401855b8281101561094f578151805160020b8552868101516fffffffffffffffffffffffffffffffff168786015285810151868601526060808201519086015260809081015173ffffffffffffffffffffffffffffffffffffffff169085015260a090930192908501906001016108e0565b5091979650505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561094f578151805160020b85528601516fffffffffffffffffffffffffffffffff16868501529284019290850190600101610979565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000811415610a4757610a476109e2565b60000392915050565b8051600281900b8114610a6257600080fd5b919050565b80516fffffffffffffffffffffffffffffffff81168114610a6257600080fd5b8051610a628161087a565b600060c08284031215610aa457600080fd5b60405160c0810181811067ffffffffffffffff82111715610aee577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052610afa83610a50565b8152610b0860208401610a50565b6020820152610b1960408401610a67565b60408201526060830151606082015260808301516080820152610b3e60a08401610a87565b60a08201529392505050565b600062ffffff80831681811415610b6357610b636109e2565b6001019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008219821115610baf57610baf6109e2565b50019056fea2646970667358221220d4e3ac893c873b93ad45379b9a9bff418a7a08de168e6faffef95c783cffbc7464736f6c63430008090033";

type ConcentratedLiquidityPoolHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConcentratedLiquidityPoolHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConcentratedLiquidityPoolHelper__factory extends ContractFactory {
  constructor(...args: ConcentratedLiquidityPoolHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConcentratedLiquidityPoolHelper> {
    return super.deploy(
      overrides || {}
    ) as Promise<ConcentratedLiquidityPoolHelper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConcentratedLiquidityPoolHelper {
    return super.attach(address) as ConcentratedLiquidityPoolHelper;
  }
  connect(signer: Signer): ConcentratedLiquidityPoolHelper__factory {
    return super.connect(signer) as ConcentratedLiquidityPoolHelper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConcentratedLiquidityPoolHelperInterface {
    return new utils.Interface(
      _abi
    ) as ConcentratedLiquidityPoolHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConcentratedLiquidityPoolHelper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ConcentratedLiquidityPoolHelper;
  }
}
