/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestTickindex, TestTickindexInterface } from "../TestTickindex";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IConcentratedLiquidityPool",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int24",
        name: "lowerOld",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "lower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "upperOld",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "upper",
        type: "int24",
      },
    ],
    name: "adjust",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610291806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630bff60fb14610030575b600080fd5b61004361003e366004610172565b610071565b60408051600295860b815293850b602085015291840b8383015290920b606082015290519081900360800190f35b6040517faf605c8800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86166004820152600285810b602483015284810b604483015283810b606483015282900b608482015260009081908190819073__$bcc72c71f8b76091ef44cf265824b83400$__9063af605c889060a40160806040518083038186803b15801561011557600080fd5b505af4158015610129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014d91906101fc565b929c919b50995090975095505050505050565b8060020b811461016f57600080fd5b50565b600080600080600060a0868803121561018a57600080fd5b853573ffffffffffffffffffffffffffffffffffffffff811681146101ae57600080fd5b945060208601356101be81610160565b935060408601356101ce81610160565b925060608601356101de81610160565b915060808601356101ee81610160565b809150509295509295909350565b6000806000806080858703121561021257600080fd5b845161021d81610160565b602086015190945061022e81610160565b604086015190935061023f81610160565b606086015190925061025081610160565b93969295509093505056fea264697066735822122095b52ae47a7f3f07c51e362270dbe8914f85926a8e73ac5bb21701cd8149312064736f6c63430008090033";

type TestTickindexConstructorParams =
  | [linkLibraryAddresses: TestTickindexLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTickindexConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class TestTickindex__factory extends ContractFactory {
  constructor(...args: TestTickindexConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        TestTickindex__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: TestTickindexLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$bcc72c71f8b76091ef44cf265824b83400\\$__", "g"),
      linkLibraryAddresses["contracts/libraries/TickIndex.sol:TickIndex"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestTickindex> {
    return super.deploy(overrides || {}) as Promise<TestTickindex>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestTickindex {
    return super.attach(address) as TestTickindex;
  }
  connect(signer: Signer): TestTickindex__factory {
    return super.connect(signer) as TestTickindex__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTickindexInterface {
    return new utils.Interface(_abi) as TestTickindexInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestTickindex {
    return new Contract(address, _abi, signerOrProvider) as TestTickindex;
  }
}

export interface TestTickindexLibraryAddresses {
  ["contracts/libraries/TickIndex.sol:TickIndex"]: string;
}
