/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface EIP173ProxyInterface extends utils.Interface {
  functions: {
    "proxyAdmin()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferProxyAdmin(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "proxyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferProxyAdmin",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "proxyAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "ProxyAdminTransferred(address,address)": EventFragment;
    "ProxyImplementationUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProxyAdminTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyImplementationUpdated"): EventFragment;
}

export type ProxyAdminTransferredEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type ProxyAdminTransferredEventFilter =
  TypedEventFilter<ProxyAdminTransferredEvent>;

export type ProxyImplementationUpdatedEvent = TypedEvent<
  [string, string],
  { previousImplementation: string; newImplementation: string }
>;

export type ProxyImplementationUpdatedEventFilter =
  TypedEventFilter<ProxyImplementationUpdatedEvent>;

export interface EIP173Proxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EIP173ProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    proxyAdmin(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferProxyAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  proxyAdmin(overrides?: CallOverrides): Promise<string>;

  supportsInterface(id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  transferProxyAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    proxyAdmin(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferProxyAdmin(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ProxyAdminTransferred(address,address)"(
      previousAdmin?: string | null,
      newAdmin?: string | null
    ): ProxyAdminTransferredEventFilter;
    ProxyAdminTransferred(
      previousAdmin?: string | null,
      newAdmin?: string | null
    ): ProxyAdminTransferredEventFilter;

    "ProxyImplementationUpdated(address,address)"(
      previousImplementation?: string | null,
      newImplementation?: string | null
    ): ProxyImplementationUpdatedEventFilter;
    ProxyImplementationUpdated(
      previousImplementation?: string | null,
      newImplementation?: string | null
    ): ProxyImplementationUpdatedEventFilter;
  };

  estimateGas: {
    proxyAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferProxyAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    proxyAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferProxyAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
