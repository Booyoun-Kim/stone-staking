/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PairReserveStruct = {
  quoteReserve: BigNumberish;
  baseReserve: BigNumberish;
};

export type PairReserveStructOutput = [BigNumber, BigNumber] & {
  quoteReserve: BigNumber;
  baseReserve: BigNumber;
};

export interface PriceOracleInterface extends utils.Interface {
  functions: {
    "DECIMAL()": FunctionFragment;
    "aggregateKlayPairReserve(address)": FunctionFragment;
    "aggregateKlayStableReserve()": FunctionFragment;
    "aggregateStablePairReserve(address)": FunctionFragment;
    "consultKlayPrice()": FunctionFragment;
    "consultPrice(address)": FunctionFragment;
    "initialize(address,address,address[])": FunctionFragment;
    "owner()": FunctionFragment;
    "poolFactory()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stableCoins(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wklay()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DECIMAL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aggregateKlayPairReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregateKlayStableReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aggregateStablePairReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "consultKlayPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consultPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableCoins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "wklay", values?: undefined): string;

  decodeFunctionResult(functionFragment: "DECIMAL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aggregateKlayPairReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregateKlayStableReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregateStablePairReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consultKlayPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consultPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wklay", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PriceOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DECIMAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    aggregateKlayPairReserve(
      token: string,
      overrides?: CallOverrides
    ): Promise<[PairReserveStructOutput]>;

    aggregateKlayStableReserve(
      overrides?: CallOverrides
    ): Promise<
      [PairReserveStructOutput] & { reserve: PairReserveStructOutput }
    >;

    aggregateStablePairReserve(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [PairReserveStructOutput] & { reserve: PairReserveStructOutput }
    >;

    consultKlayPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    consultPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    initialize(
      _poolFactory: string,
      _wklay: string,
      _stableCoins: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolFactory(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableCoins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wklay(overrides?: CallOverrides): Promise<[string]>;
  };

  DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

  aggregateKlayPairReserve(
    token: string,
    overrides?: CallOverrides
  ): Promise<PairReserveStructOutput>;

  aggregateKlayStableReserve(
    overrides?: CallOverrides
  ): Promise<PairReserveStructOutput>;

  aggregateStablePairReserve(
    token: string,
    overrides?: CallOverrides
  ): Promise<PairReserveStructOutput>;

  consultKlayPrice(overrides?: CallOverrides): Promise<BigNumber>;

  consultPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _poolFactory: string,
    _wklay: string,
    _stableCoins: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolFactory(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableCoins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wklay(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

    aggregateKlayPairReserve(
      token: string,
      overrides?: CallOverrides
    ): Promise<PairReserveStructOutput>;

    aggregateKlayStableReserve(
      overrides?: CallOverrides
    ): Promise<PairReserveStructOutput>;

    aggregateStablePairReserve(
      token: string,
      overrides?: CallOverrides
    ): Promise<PairReserveStructOutput>;

    consultKlayPrice(overrides?: CallOverrides): Promise<BigNumber>;

    consultPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _poolFactory: string,
      _wklay: string,
      _stableCoins: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolFactory(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stableCoins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wklay(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

    aggregateKlayPairReserve(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aggregateKlayStableReserve(overrides?: CallOverrides): Promise<BigNumber>;

    aggregateStablePairReserve(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    consultKlayPrice(overrides?: CallOverrides): Promise<BigNumber>;

    consultPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _poolFactory: string,
      _wklay: string,
      _stableCoins: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableCoins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wklay(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aggregateKlayPairReserve(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aggregateKlayStableReserve(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aggregateStablePairReserve(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    consultKlayPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    consultPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _poolFactory: string,
      _wklay: string,
      _stableCoins: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableCoins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wklay(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
